import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c,a,b as n,d as e,f as o}from"./app-40ae522b.js";const i={},r=a("h1",{id:"midaco",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#midaco","aria-hidden":"true"},"#"),n(" MIDACO")],-1),u=a("h2",{id:"简介",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),n(" 简介")],-1),d={href:"http://midaco-solver.com/index.php/more/multi-objective",target:"_blank",rel:"noopener noreferrer"},m=a("strong",null,"多目标",-1),k={href:"http://midaco-solver.com/index.php/more/parallelization",target:"_blank",rel:"noopener noreferrer"},v={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},b={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},h={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},_={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},g={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},x={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},f={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},C={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},q={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},I={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},M={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},O=o('<h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><ol><li><p>MIDACO是一个用于全局优化问题的求解器</p><ul><li>支持单目标和多目标优化</li><li>支持连续型、离散/组合型和混合整数型变量</li><li>可以处理有约束和无约束的问题</li></ul></li><li><p>采用进化混合算法（结合了进化算法和其他优化技术）</p><ul><li>基于蚁群优化（ACO）的元启发式算法</li><li>内部混合了回溯线搜索，以实现快速局部收敛</li><li>目标和约束可以是线性或非线性的（不要求可微性）</li><li>黑盒求解器：目标和约束函数可以是未知的</li></ul></li><li><p>大规模数据处理能力</p><ul><li>可解决具有多达100,000个变量的问题</li><li>可处理数千个约束和数百个目标</li></ul></li><li><p>并行化运算</p><ul><li>能够进行大规模并行化，利用数千个核心/线程（包括GPGPU）</li></ul></li><li><p>简洁普适的代码</p><ul><li>支持多种编程语言，如Excel、VBA、Java、C#、R、Matlab、Octave、Python、Julia、C/C++、Fortran等</li><li>超轻量级（最小约200kb）</li><li>完全自包含的源代码（无第三方依赖）</li><li>在所有平台上编译和运行，包括Win/Mac/Unix和Web服务器</li><li>易于使用和嵌入</li></ul></li></ol><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><p>以下是一些常见的使用MIDACO的情况：</p><ol><li>数学建模和优化问题：MIDACO可用于解决数学建模和优化问题，如线性规划、非线性规划、整数规划、多目标优化等。它能够处理具有大规模变量和约束的问题，并提供高效的求解能力。</li><li>工程设计和优化：MIDACO可用于工程领域中的设计和优化问题，例如结构优化、工艺优化、参数优化等。它能够帮助工程师在设计过程中找到最佳解决方案，以满足特定的性能指标或约束条件。</li><li>仿真和模拟优化：对于黑盒函数、模拟器或复杂仿真模型，MIDACO可以通过最小化或最大化目标函数来优化参数设置。它能够在优化过程中调用模拟器，并通过评估输出结果来指导参数搜索，以获得最佳性能或结果。</li><li>多目标和多约束问题：MIDACO可以处理具有多个目标函数和多个约束条件的问题。它能够在多个目标之间寻找平衡解，并在满足多个约束条件的情况下找到最优解。</li><li>科学研究和实验设计：对于需要进行大量试验和参数调整的科学研究，MIDACO可以帮助自动化参数搜索过程，并加速实验设计。它能够帮助研究人员更快地找到最佳参数组合，以获得准确的结果。</li></ol><p>综上所述，如果您面临复杂的优化问题，无论是数学建模、工程设计、仿真优化还是科学研究，MIDACO可能是一个有用的工具。它具有处理大规模问题、多目标和多约束问题的能力，并且适用于各种编程语言和平台，使其成为解决复杂问题的有效选择。</p><h2 id="安装与使用" tabindex="-1"><a class="header-anchor" href="#安装与使用" aria-hidden="true">#</a> 安装与使用</h2>',7),j={href:"https://www.midaco-solver.com/",target:"_blank",rel:"noopener noreferrer"},D={href:"http://midaco-solver.com/index.php/download",target:"_blank",rel:"noopener noreferrer"},A=a("p",null,"下面以C++语言为例介绍MIDACO的安装与使用：",-1),N={href:"http://midaco-solver.com/data/c/midaco.c",target:"_blank",rel:"noopener noreferrer"},w={href:"http://midaco-solver.com/data/c/example_NLP.cpp",target:"_blank",rel:"noopener noreferrer"},E={href:"http://midaco-solver.com/data/c/example_NLPc.cpp",target:"_blank",rel:"noopener noreferrer"},L=o(`<li><p>打开命令行界面，并使用gcc编译器分别将midaco.c文件和应用层面的文件（例如example_MINLPc.c）编译为.o目标文件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rCopy codegcc -c example_MINLPc.c
gcc -c midaco.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将生成的目标文件与数学库（libm）一起链接，生成最终的可执行文件&quot;run.exe&quot;。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>arduinoCopy code
gcc -o run example_MINLPc.o midaco.o -lm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行可执行文件&quot;run.exe&quot;，即可生成包含优化方案的文档&quot;MIDACO_SCREEN.TXT&quot;和&quot;MIDACO_SOLUTION.TXT&quot;。</p></li>`,3),P=a("p",null,"除了在命令行中进行编译，您还可以选择在集成开发环境（IDE）中进行编译。更详细的信息请参考MIDACO的官方文档。如果您使用Fortran语言，可以采用类似的方法进行编译和使用。",-1),T=a("p",null,"以Julia语言为例介绍另一种使用方式：",-1),y={href:"http://midaco-solver.com/data/julia/midaco.jl",target:"_blank",rel:"noopener noreferrer"},V={href:"http://midaco-solver.com/data/julia/win64/midacoJL.dll",target:"_blank",rel:"noopener noreferrer"},J=a("li",null,"将下载的midaco.jl文件、动态链接库以及您的应用层面文件（例如example_NLP.jl）放置在同一个目录下。",-1),S=a("li",null,"运行您的应用层面文件，即可使用MIDACO求解优化问题。",-1),B=o(`<p>对于Python语言，您可以采用类似的方法进行安装和使用MIDACO。</p><h2 id="代码编写格式" tabindex="-1"><a class="header-anchor" href="#代码编写格式" aria-hidden="true">#</a> 代码编写格式</h2><p>所有代码文件都包含以下几个部分：设置问题的维度、边界、起始点、停止准则和打印选项；定义问题和求解选项；调用MIDACO求解器解决问题。</p><p>通过执行源代码文件中的MIDACO求解器，并将结果存储在<code>solution</code>变量中。解包括目标值（<code>solution[&quot;f&quot;]</code>）、约束值（<code>solution[&quot;g&quot;]</code>）和变量值（<code>solution[&quot;x&quot;]</code>）。</p><p>不同编程语言的具体格式要求略有不同，请参考官方文档或提供的示例。</p><p>下面以Julia语言为例介绍如何使用MIDACO：</p><ol><li>定义问题函数</li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code><span class="token keyword">function</span> problem_function<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  f <span class="token operator">=</span> Array<span class="token punctuation">{</span>Float64<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">(</span>undef<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 初始化目标函数数组 F(X) </span>
  <span class="token comment"># 目标函数 F(X)</span>
  f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> 
         <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> 
         <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> 
         <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1.23456789</span>
  <span class="token comment"># 约束</span>
  g <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> f<span class="token punctuation">,</span> g
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>授权</li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>key <span class="token operator">=</span> <span class="token string">&quot;MIDACO_LIMITED_VERSION___[CREATIVE_COMMONS_BY-NC-ND_LICENSE]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一行定义了一个名为<code>key</code>的字符串变量，并将其赋值为&quot;MIDACO_LIMITED_VERSION___[CREATIVE_COMMONS_BY-NC-ND_LICENSE]&quot;。它是用于授权的密钥，用于限制MIDACO版本的使用。</p><ol start="3"><li>定义问题和求解选项</li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>problem <span class="token operator">=</span> Dict<span class="token punctuation">(</span><span class="token punctuation">)</span>
option <span class="token operator">=</span> Dict<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两行创建了两个空字典变量<code>problem</code>和<code>option</code>，用于存储问题定义和求解选项。</p><ol start="4"><li>设置问题的类型</li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>problem<span class="token punctuation">[</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 目标函数数量 </span>
problem<span class="token punctuation">[</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment"># 总变量数</span>
problem<span class="token punctuation">[</span><span class="token string">&quot;ni&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 整数变量数量（0 &lt;= ni &lt;= n） </span>
problem<span class="token punctuation">[</span><span class="token string">&quot;m&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 总约束条件数</span>
problem<span class="token punctuation">[</span><span class="token string">&quot;me&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 等式约束条件数量（0 &lt;= me &lt;= m）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这几行设置了问题的维度和约束条件。其中，<code>o</code>表示目标函数的数量（本例中为1），<code>n</code>表示变量的总数（本例中为4），<code>ni</code>表示整数变量的数量（本例中为0），<code>m</code>表示约束条件的数量（本例中为0），<code>me</code>表示等式约束条件的数量（本例中为0）。</p><ol start="5"><li>定义问题的变量边界</li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>problem<span class="token punctuation">[</span><span class="token string">&quot;xl&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
problem<span class="token punctuation">[</span><span class="token string">&quot;xu&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两行定义了问题的变量边界。<code>xl</code>表示下界，<code>xu</code>表示上界。在本例中，变量的下界为[1, 1, 1, 1]，上界为[4, 4, 4, 4]。</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>problem<span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> problem<span class="token punctuation">[</span><span class="token string">&quot;xl&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一行设置了问题的起始点。在本例中，起始点被设置为下界<code>xl</code>。</p><ol start="6"><li>设置停止准则</li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>option<span class="token punctuation">[</span><span class="token string">&quot;maxeval&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span>     <span class="token comment"># 最大函数评估次数（例如1000000） </span>
option<span class="token punctuation">[</span><span class="token string">&quot;maxtime&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span>  <span class="token comment"># 最大时间限制（秒）（例如1天 = 60 * 60 * 24）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两行设置了停止准则。<code>maxeval</code>表示最大函数评估次数，本例中设置为10000次。<code>maxtime</code>表示最大时间限制，本例中设置为1天。</p><ol start="7"><li>设置打印选项</li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>option<span class="token punctuation">[</span><span class="token string">&quot;printeval&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>  <span class="token comment"># 当前最佳解的打印频率（例如1000） </span>
option<span class="token punctuation">[</span><span class="token string">&quot;save2file&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>     <span class="token comment"># 是否将结果保存到TXT文件（0=否/1=是）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两行设置了打印选项。<code>printeval</code>表示当前最佳解的打印频率，本例中设置为每1000次评估打印一次。<code>save2file</code>表示是否将结果保存到TXT文件，本例中设置为保存（1）。</p><ol start="8"><li>设置并行化选项</li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>option<span class="token punctuation">[</span><span class="token string">&quot;parallel&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 有关Julia的并行化，请参考MIDACO网站</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一行设置了并行化选项。在本例中，设置为禁用并行化（0）。</p><ol start="9"><li>调用文件</li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>include<span class="token punctuation">(</span><span class="token string">&quot;midaco.jl&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一行通过包含<code>midaco.jl</code>文件将其导入到当前上下文中，以便后续调用其中的函数。</p><ol start="10"><li>求解</li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>solution <span class="token operator">=</span> midaco<span class="token punctuation">(</span>problem<span class="token punctuation">,</span> option<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一行调用<code>midaco</code>函数，将问题定义、求解选项和密钥作为参数传递给该函数，并将返回的解存储在<code>solution</code>变量中。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>安装与使用过程涉及程序的编译、链接和调用链接库。与其他求解器相比，MIDACO统一规范了模型的编写格式，使用者只需根据不同优化问题的示例编写自己的代码。在MIDACO中，底层运算逻辑已经编写完成，使用者只需调用相应库并为problem、option和key进行赋值，从而实现优化问题的求解。黑盒优化中的&quot;黑盒&quot;指的是我们要研究的模型或问题，其中我们不知道其内部结构，但可以通过给定输入获取输出。MIDACO通过为模型提供输入并获取输出来进行优化。它将问题视为黑盒，其中目标函数和约束函数是未知的。</p>`,39);function R(F,X){const s=l("ExternalLinkIcon");return p(),c("div",null,[r,u,a("p",null,[n("MIDACO是一个用于解决数值优化问题的求解器。它可以应用于连续型（NLP）、离散/整数型（IP）和混合整数型（MINLP）问题，支持单目标和"),a("a",d,[m,e(s)]),n("（MO）优化。问题可以包含平等约束和/不平等约束，适用于具有数千个变量或数百个目标的问题。MIDACO采用无导数的进化混合算法，将问题视为黑盒，可以处理非凸性、不连续性或随机噪声等关键函数特性。对于耗时的应用程序，MIDACO提供了高效的"),a("a",k,[n("并行化"),e(s)]),n("策略。该软件支持多种编程语言，包括"),a("a",v,[n("Excel"),e(s)]),n("、"),a("a",b,[n("VBA"),e(s)]),n("、"),a("a",h,[n("Java"),e(s)]),n("、"),a("a",_,[n("C#"),e(s)]),n("、"),a("a",g,[n("Matlab"),e(s)]),n("、"),a("a",x,[n("Octave"),e(s)]),n("、"),a("a",f,[n("Python"),e(s)]),n("、"),a("a",C,[n("R"),e(s)]),n("、"),a("a",q,[n("Julia"),e(s)]),n("、"),a("a",I,[n("C/C++"),e(s)]),n("和"),a("a",M,[n("Fortran"),e(s)]),n("。")]),O,a("p",null,[n("访问MIDACO的"),a("a",j,[n("官方网站"),e(s)]),n("，在"),a("a",D,[n("下载页面"),e(s)]),n("选择适合您的版本，并按照相应的提示进行安装。")]),A,a("ol",null,[a("li",null,[a("p",null,[n("首先，您可以下载"),a("a",N,[n("midaco.c"),e(s)]),n('文件，该文件包含了算法的实现和相关函数。您也可以复制文件的全部内容，使用记事本生成名为"midaco.c"的文件（注意文件后缀名为.c）。')])]),a("li",null,[a("p",null,[n("将下载的midaco.c文件与您的应用层面文件放置在同一个目录下。在下载页面上，您可以找到一些示例文件，例如"),a("a",w,[n("example_NLP.cpp"),e(s)]),n("、"),a("a",E,[n("example_NLPc.cpp"),e(s)]),n("等。")])]),L]),P,T,a("ol",null,[a("li",null,[n("首先，您可以下载"),a("a",y,[n("midaco.jl"),e(s)]),n("文件和对应的动态链接库（例如64位Windows系统的"),a("a",V,[n("midacoJL.dll"),e(s)]),n("）。")]),J,S]),B])}const G=t(i,[["render",R],["__file","MIDACO.html.vue"]]);export{G as default};
