import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as t,c as l,a as p,b as n,d as o,w as c,f as s}from"./app-2f5a3223.js";const r="/assets/image/04Modeling/WathMTKdo-14_38_58.png",u={},d=s(`<h1 id="mtk的-前世今生" tabindex="-1"><a class="header-anchor" href="#mtk的-前世今生" aria-hidden="true">#</a> MTK的&quot;前世今生&quot;</h1><p>!!! tip<br> Contents：建模、MTK、Symbolics</p><pre><code>Contributor: YJY

Email:522432938@qq.com

如有错误，请批评指正。
</code></pre><p>!!! note</p><pre><code>MTK = ModelingToolkit.jl

[Symbolics.jl](https://symbolics.juliasymbolics.org/dev/)为MTK依赖的符号计算包

[ModelingToolkit.jl](https://mtk.sciml.ai/stable/)为基于符号系统的建模工具包。

[DifferentialEquations.jl](https://diffeq.sciml.ai/dev/)为处理时间微分的求解建模工具包。
</code></pre><p>MTK似乎很强大，本篇介绍MTK在建模中承担的角色。</p><h2 id="模块化思想" tabindex="-1"><a class="header-anchor" href="#模块化思想" aria-hidden="true">#</a> 模块化思想</h2><p>首先，我们聊一聊程序设计中的模块化思想。</p><p>个人认为，模块化其实不单单是一种软件设计的思想。毫不夸张地说，模块化也是一种组织与架构的哲学。模块化的含义可以用一个词语概括——各司其职。若是在软件开发中，需要加上一个限定词——精细化。即，精细化的各司其职。</p><p>模块化解决问题的核心在于，把问题分成若干个部分，每个部分由特定的对象完成。当每个对象的任务都完成之后，问题也就解决了。</p><p>从软件开发到社会的组织架构，都由模块化的影子。课程的小组合作，每个人负责一个小部分；上市公司分为市场部、研发部、财务部...。那么在程序中，这些模块的“对象”就是函数。每个函数完成各的任务，当全部执行完成之后，问题解决了。</p><p>例如，有一个变量var。问题是：计算<code>10 * var + var * var + 1</code>的结果。</p><p>对于这样一个问题，我们习惯于直接把表达式输入得到结果：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> var <span class="token operator">+</span> var <span class="token operator">*</span> var <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但采用模块化的思想，不会这么做。模块化会把这个活分给三个函数去做——乘法函数、平方函数、求和函数。当这个三个函数完成了各自的事情之后，问题解决了。</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code><span class="token keyword">function</span> mult<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> b
<span class="token keyword">end</span>
<span class="token keyword">function</span> square<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> a
<span class="token keyword">end</span>
<span class="token keyword">function</span> sum<span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    s <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">:</span>length<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        s <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">end</span>
    <span class="token keyword">return</span> s
<span class="token keyword">end</span>
result <span class="token operator">=</span> sum<span class="token punctuation">(</span>mult<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>var<span class="token punctuation">)</span><span class="token punctuation">,</span>square<span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，对于这样一个问题非要用模块化思想那是闲的。若是针对一个复杂的系统，没有人能完成所有细节的解决方案，那么模块化思想就会变得尤为重要。</p><p>主要有两个方面的好处：</p><ol><li><p>从自上而下的角度。作为上层的调用者，不需要关心底层函数怎样解决问题。只需要知道，传递什么数据能获得什么结果。这对于复杂问题的解决非常重要。大问题分为几个小问题，小问题再分为更小的问题。作为架构师只需要关心核心部分的拆解即可。这是高效的“各司其职”。</p></li><li><p>从自下而上的角度。把问题细分到不能再分，那么其会具有解决任何问题的潜力。什么意思呢？如果把一个表达式作为一个整体求解，这是完全没有问题的。但如果把一个表达式拆解成四则运算分别求解，就如上面的例子。由该问题设计的四则运算函数，对它们进行合理组合能够解决任何一个求解表达式问题。孰高孰低，立见高下。也可以说，模块化后的解决方案具有普适性，解决了复杂问题中的基本共性问题（足够细分的情况下）。</p></li></ol><p>所以在软件设计领域，有这样一种说法——每一个函数编写时只需要解决一个很小的问题。</p><h2 id="mtk在建模仿真中的角色" tabindex="-1"><a class="header-anchor" href="#mtk在建模仿真中的角色" aria-hidden="true">#</a> MTK在建模仿真中的角色</h2>`,21),v=s('<ol><li>把问题抽象可量化、可处理的数学问题</li><li>把数学问题设计成可用计算机处理与计算的可计算问题</li></ol><p>进一步细分有：</p><ol><li>抽象问题</li><li>符号建模</li><li>模型化简</li><li>生成迭代格式</li><li>迭代求解</li></ol><p>毫无疑问，第一步由人来完成。剩下的步骤可以由MTK完成。那么新的问题在于，从2-5是否全由MTK从零开始构建呢？答案是否定的！</p><p>实际上，在建模仿真这样的大问题中，仍然是模块化的思想。具体的分工如下：</p><ul><li>Symbolics.jl：负责符号运算</li><li>ModelingToolkit.jl：负责模型化简，生成迭代格式</li><li>DifferentialEquations.jl：负责求解</li></ul><p>ModelingToolkit的核心在于各种System，System作为一种数据结构，本质是存储的是变量以及由变量构成的方程。而变量的定义与方程的定义由Symbolics完成。所以说，Symbolics是符号计算的基石，MTK在Symbolics的基础之上进一步处理方程与变量，处理成DE能够求解的形式，传递给DE计算。最终得到结果。它们三者的关系如图：</p><figure><img src="'+r+`" alt="图 6" tabindex="0" loading="lazy"><figcaption>图 6</figcaption></figure><h2 id="symbolics实例" tabindex="-1"><a class="header-anchor" href="#symbolics实例" aria-hidden="true">#</a> Symbolics实例</h2><p><strong>符号定义</strong>：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>@variables t α σ<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> β<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
@variables w<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> x<span class="token punctuation">(</span>t<span class="token punctuation">)</span> y z<span class="token punctuation">(</span>t<span class="token punctuation">,</span> α<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
@variables A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方程定义</strong>：</p><div class="language-@repl line-numbers-mode" data-ext="@repl"><pre class="language-@repl"><code>using Symbolics

@variables x y;
@variables A[1:3, 1:3] B[1:3, 1:3];
x ~ y
x - y ~ 0
A ~ B
A .~ 3x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>微分运算</strong>：</p><div class="language-@repl line-numbers-mode" data-ext="@repl"><pre class="language-@repl"><code>@variables t
D = Differential(t)
z = t + t^2
D(z)
expand_derivatives(D(z)) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>化简与符号赋值</strong>：</p><div class="language-@repl line-numbers-mode" data-ext="@repl"><pre class="language-@repl"><code>B = simplify.([t + t^2 + t + t^2  2t + 4t
               x + y + y + 2t     x^2 - x^2 + y^2])
simplify.(substitute.(B, (Dict(x =&gt; y^2),)))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有计算雅可比矩阵、函数符号化等等符号计算的内容可查看官方文档。</p><h2 id="小结与启示" tabindex="-1"><a class="header-anchor" href="#小结与启示" aria-hidden="true">#</a> 小结与启示</h2><h3 id="启示-文档查询" tabindex="-1"><a class="header-anchor" href="#启示-文档查询" aria-hidden="true">#</a> 启示：文档查询</h3><p>从模块化的角度看待MTK，我们就能知道。MTK能做什么与不能做什么。又或者说，遇到了问题，应该找谁。</p><p>问题类型一：</p><ol><li>符号数组应该如何使用与计算？</li><li>Register如何使用？</li><li>如何批量处理符号？</li></ol><p>这样的问题应该去看Symbolics.jl的文档。因为MTK就是在它的基础上构建的。它不支持的，MTK也没办法使用。</p><p>问题类型二：</p><ol><li>求解的结果如何处理？</li><li>如何确定精度？</li><li>Callback如何使用？</li></ol><p>这样的问题应该去看DifferentialEquations.jl的文档。因为真正的求解工作是DE完成的。solution的结果也从DE中来（MTK会提供关于符号与solution的接口，但DE中solution handling能用的功能，MTK中也一定能用）。</p><h3 id="启示-函数使用" tabindex="-1"><a class="header-anchor" href="#启示-函数使用" aria-hidden="true">#</a> 启示：函数使用</h3><p>在MTK文档没有写上的功能，但DE与Symbolics的文档中有。一般而言都能使用。例如，符号数组的矩阵运算，MTK中一定能用（某些特殊功能不一定）。DE中关于Problem类型的一些参数调用，MTK也可以使用。</p><p>每个包有每个包的特性，<strong>包与包之间的依赖关系不是功能的交集，而是功能的并集</strong>。底层依赖包的功能在上层调用包一般都能使用。只要有了这一点认识。就能够将SCIML生态的功能充分利用起来。这是贯通的其生态的关键。</p>`,30);function m(k,b){const a=i("RouterLink");return t(),l("div",null,[d,p("p",null,[n("在"),o(a,{to:"/docs/04Modeling/DE_intro.html"},{default:c(()=>[n("DifferentialEquations建模方法")]),_:1}),n("从发现问题到获得计算结果，在现代计算科学中一般分为两步：")]),v])}const f=e(u,[["render",m],["__file","WathMTKdo.html.vue"]]);export{f as default};
