import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as c,c as r,a as e,b as o,d as i,f as s}from"./app-5be717d8.js";const d={},p=e("h1",{id:"docker-compose环境准备",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker-compose环境准备","aria-hidden":"true"},"#"),o(" docker-compose环境准备")],-1),t=e("h2",{id:"安装wsl",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装wsl","aria-hidden":"true"},"#"),o(" 安装wsl")],-1),u=s(`<li><p><strong>启用 WSL</strong></p><p>作为管理员打开 PowerShell (右键点击 Windows 徽标 -&gt; Windows PowerShell (管理员))，并执行以下命令：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>wsl <span class="token operator">--</span>install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令将安装 WSL 和默认 Linux 发行版（通常是 Ubuntu）。</p></li><li><p><strong>启用虚拟机平台</strong></p><p>同样在管理员权限的 PowerShell 中，执行以下命令：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,2),k=e("p",null,[e("strong",null,"下载 Linux 内核更新包")],-1),m=e("p",null,"如果在前面的步骤中没有自动完成，您需要手动下载并安装 Linux 内核更新包。",-1),g={href:"https://aka.ms/wsl2kernel",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,"下载后，按照提示完成安装。",-1),v=s(`<li><p><strong>设置 WSL 默认版本为 2</strong></p><p>再次打开管理员权限的 PowerShell 并执行以下命令：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>安装 Linux 发行版</strong></p><p>如果您在第一步中已经使用 <code>wsl --install</code> 命令，您应该已经有了一个默认的 Linux 发行版（如 Ubuntu）。如果没有，您可以从 Microsoft Store 中选择并安装一个 Linux 发行版，例如 Ubuntu, Debian, Fedora Remix 等。</p></li><li><p><strong>初始化 Linux 发行版</strong></p><p>打开你所选择的 Linux 发行版应用程序，它将提示您设置新的用户名和密码。</p></li>`,3),b=s(`<p>完成以上步骤后，WSL 2 应该已经在您的 Windows 11 计算机上安装并正确配置了。您可以通过打开命令行或 PowerShell 并输入 <code>wsl</code> 命令来使用它。</p><h2 id="安装docker和docker-compose" tabindex="-1"><a class="header-anchor" href="#安装docker和docker-compose" aria-hidden="true">#</a> 安装docker和docker-compose</h2><p>在 WSL 2 下安装 Docker 和 Docker Compose 的过程相对简单，尤其是考虑到 WSL 2 提供了完整的 Linux 内核支持。以下是步骤：</p><ol><li><p><strong>安装 Docker</strong></p><p>在你的 WSL 2 终端里 (比如说 Ubuntu)，执行以下命令来安装 Docker：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 Docker 服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以将 Docker 设置为开机启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>安装 Docker Compose</strong></p><p>首先，使用以下命令下载最新版本的 Docker Compose：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">docker-compose</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，你可以通过输入 <code>docker-compose --version</code> 来检查其版本。</p></li></ol><p>此外，请确保你的 Windows 防火墙允许 Docker 进行通信，尤其是当你需要与外部资源进行交互时。</p><h2 id="docker简介" tabindex="-1"><a class="header-anchor" href="#docker简介" aria-hidden="true">#</a> docker简介</h2><p><strong>Docker</strong> 是一个开源平台，它允许开发者和系统管理员构建、部署和运行应用程序在容器内。容器允许开发者将他们的应用程序与其它所有依赖项打包到一起，确保应用程序在任何环境中都能以相同的方式运行。以下是 Docker 的一些核心概念和特点：</p><ol><li><p><strong>容器化</strong>：</p><ul><li><strong>容器</strong> 是轻量级、独立的、可执行的软件包，其中包含了运行某个应用所需的一切：代码、运行时、系统工具、系统库和设置。这确保了应用在任何环境中的一致性。</li></ul></li><li><p><strong>镜像</strong>：</p><ul><li>Docker 使用 <strong>镜像</strong> 来打包应用及其依赖项。一旦创建了镜像，你就可以在任何 Docker 环境中使用这个镜像来创建容器。</li><li>镜像是分层的，这意味着每次修改都会创建一个新的层，这样可以提高存储效率并加速部署。</li></ul></li><li><p><strong>Docker Hub</strong>：</p><ul><li>是一个公开的注册中心，开发者可以在上面分享和存储他们的应用镜像。也有私有注册中心可用于企业或私人使用。</li></ul></li><li><p><strong>声明式的设置</strong>：</p><ul><li>Docker 允许用户通过 <code>Dockerfile</code>（一个文本文件）声明性地定义应用的环境。这意味着不需要手动设置或配置环境。</li></ul></li><li><p><strong>隔离</strong>：</p><ul><li>Docker 提供应用级的隔离。每个容器在自己独立的空间中运行，并有自己的网络接口、文件系统和依赖项。这使得容器互不干扰，增加了安全性。</li></ul></li><li><p><strong>集成和自动化</strong>：</p><ul><li>由于 Docker 容器的一致性和可移植性，它们非常适合持续集成和持续部署 (CI/CD) 流程。</li></ul></li><li><p><strong>轻量级和快速</strong>：</p><ul><li>与传统的虚拟机相比，Docker 容器启动得更快，占用的资源更少，因为它们共享相同的 OS 内核，而不是每个都有自己的操作系统副本。</li></ul></li></ol><p>简而言之，Docker 提供了一种方法，使得开发者和运维团队可以确保他们的应用程序和服务在任何环境中都能如预期般稳定地运行，从而消除了“在我机器上是可以运行的”这种情况。</p><h2 id="docker-compose简介" tabindex="-1"><a class="header-anchor" href="#docker-compose简介" aria-hidden="true">#</a> docker-compose简介</h2><p><code>docker-compose</code> 是一个用于定义和运行多容器 Docker 应用程序的工具。通过一个简单的 <code>docker-compose.yml</code> 文件，用户可以定义一个多容器应用的服务、网络和卷，然后使用单一的 <code>docker-compose</code> 命令来启动和停止整个堆栈。</p><p>以下是 <code>docker-compose</code> 的一些核心特点和概念：</p><ol><li><p><strong>服务定义</strong>：</p><ul><li>在 <code>docker-compose.yml</code> 文件中，你可以定义应用程序的各个服务，每个服务都会运行在其自己的容器中。你可以定义你想要的任何数量的服务，例如数据库、API 服务、前端应用程序等。</li></ul></li><li><p><strong>网络和卷</strong>：</p><ul><li><code>docker-compose</code> 允许你定义应用的网络和卷，这使得容器之间的通信和数据存储变得简单。</li></ul></li><li><p><strong>一键部署</strong>：</p><ul><li>通过简单地运行 <code>docker-compose up</code>，所有定义在 <code>docker-compose.yml</code> 文件中的服务、网络和卷都会被创建并启动。</li><li>使用 <code>docker-compose down</code> 可以轻松地停止并删除所有组件。</li></ul></li><li><p><strong>声明式配置</strong>：</p><ul><li><code>docker-compose.yml</code> 文件提供了一种声明式的方式来定义你的应用组件和配置。这确保了环境的一致性和可重现性。</li></ul></li><li><p><strong>环境变量和配置文件</strong>：</p><ul><li><code>docker-compose</code> 支持使用环境变量和 <code>.env</code> 文件来参数化配置，这使得开发、测试和生产环境之间的转换更加轻松。</li></ul></li><li><p><strong>本地开发和测试</strong>：</p><ul><li><code>docker-compose</code> 是一个强大的工具，尤其对于本地开发和测试。开发者可以在他们的机器上定义和运行与生产环境相似的复杂应用，无需安装任何额外的服务或依赖。</li></ul></li><li><p><strong>与 Docker CLI 相集成</strong>：</p><ul><li><code>docker-compose</code> 使用与 Docker 命令行相似的语法和结构，这使得从 Docker 过渡到 <code>docker-compose</code> 变得容易。</li></ul></li></ol><p>简而言之，<code>docker-compose</code> 提供了一个简单而高效的方法来定义、运行和管理多容器应用，无论是在本地、测试环境还是生产环境。</p>`,14);function f(_,x){const n=a("ExternalLinkIcon");return c(),r("div",null,[p,t,e("ol",null,[u,e("li",null,[k,m,e("p",null,[e("a",g,[o("点击此处下载最新的 WSL2 Linux 内核更新包"),i(n)])]),h]),v]),b])}const L=l(d,[["render",f],["__file","01-docker-compose环境准备.html.vue"]]);export{L as default};
