import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as s,c as n,a as p,b as e,d as o,f as l}from"./app-65858a06.js";const c={},_=l('<h1 id="优化问题建模之递归建模方法" tabindex="-1"><a class="header-anchor" href="#优化问题建模之递归建模方法" aria-hidden="true">#</a> 优化问题建模之递归建模方法</h1><h2 id="递归与plasmo-jl的思想" tabindex="-1"><a class="header-anchor" href="#递归与plasmo-jl的思想" aria-hidden="true">#</a> 递归与plasmo.jl的思想</h2><p>还记得我们之前提到过的有理数计算吗？当我们之前提到有理数计算时，我们可以构建一个结构体来表示有理数，其中有理数由分子和分母组成。我们可以定义相应的运算符函数来进行有理数的运算，并返回新的有理数类型的实例。同样地，我们在优化问题建模中也可以采用类似的思路。</p><p>plasmo.jl 是一个基于 Julia 语言的优化建模库，它底层使用了 JuMP.jl。plasmo.jl 的核心概念是将一个优化系统定义为一个图。图由多个子图构成，而子图可以定义决策变量、约束和优化目标。子图和子图之间可以连接，并且连接具有不同的类型。实质上，连接是为了补充子图之间的变量之间的约束关系。</p><p>在 plasmo.jl 中，子图的决策变量是由子图各自的决策变量的并集组成。约束是子图原有约束的并集再加上连接约束。目标函数的定义则是子图目标函数的加和，因为我们处理的是单目标优化问题。可以将子图的目标函数看作是局部目标函数对整体目标函数的贡献。例如，对于能源系统的成本计算，我们可以将各子图的成本作为局部目标函数，然后将它们相加得到整体的目标函数。</p><p>综上所述，plasmo.jl 提供了一个灵活的图模型来描述优化系统，其中子图代表了特定的决策变量、约束和目标函数。子图之间的连接用于约束变量之间的关系。通过这种方式，我们可以构建一个整体的图，其中决策变量是各个子图决策变量的并集，约束是原有约束的并集加上连接约束，目标函数是各子图目标函数的加和。这种建模方式能够更好地表示复杂优化问题，并利用图的结构进行优化求解。</p><p><strong>递归思想</strong></p><p>递归是有理数计算和优化问题建模中的核心思想之一。在有理数计算中，递归可以用于实现分数的化简、相加、相减、相乘和相除等操作。通过递归的方式，可以不断地将复杂的运算拆解为更简单的子问题，并最终得到结果。</p><p>类似地，在优化问题建模中，递归思想也可以应用。优化问题往往可以分解为多个子问题，并将它们通过递归的方式进行组合和求解。每个子问题可以被视为一个独立的优化子图，其中包含决策变量、约束和目标函数。然后，通过连接子图之间的变量和约束，可以形成一个更大的图，并在整体图上进行优化求解。</p><p>递归的优势在于它能够处理复杂的问题，并将问题分解为更小的子问题。这种分解和组合的过程可以提供更好的问题结构表示，并且可以利用问题的局部性质进行优化搜索。通过递归的思想，我们可以将复杂的优化问题分解为多个子问题，并逐步解决每个子问题，最终得到整体的优化结果。</p><p>总结起来，递归是有理数计算和优化问题建模中的重要思想。它能够帮助我们处理复杂的问题，并通过分解和组合子问题的方式，提供更好的问题表示和优化求解的能力。</p><p><strong>建模的时候从子图开始，逐级建立，就好比列出有理数的四则运算表达式。</strong></p><p>整个建模过程类似于逐级建立子图并最终构建整体优化模型的过程。这种方法可以类比于列出有理数的四则运算表达式，其中每个子图对应于运算中的一个操作或子表达式。</p><p>在建模过程中，我们可以从最基本的子图开始，定义决策变量、约束和目标函数。这些子图可以代表优化问题的局部部分，例如某个子系统、某个环节或某个决策变量集合。然后，我们通过连接子图之间的变量和约束，逐级构建更大的子图，直到形成整体优化模型。</p><p>类似于有理数的四则运算表达式，我们可以将子图之间的连接视为运算符，用于描述变量之间的关系和约束。通过连接，我们可以将不同子图的决策变量和约束进行整合，并确保它们在整个优化模型中的一致性。</p><p>这种逐级建立子图的方法可以帮助我们分解复杂的优化问题，并将其组织为层次结构。每个子图对应于一个局部问题，可以更容易地进行建模和分析。同时，通过连接子图，我们能够构建出整体的优化模型，以便进行综合的优化求解。</p><p>需要注意的是，在建立子图和连接时，我们需要考虑子图之间的相互作用和约束，以确保整体模型的准确性和一致性。合理的子图划分和连接策略可以提高问题的可解性和求解效率，并使建模过程更加简洁和可管理。</p><p><strong>利用递归对整体优化问题展平</strong></p><p>递归在有理数计算表达式求值和整体优化问题展平中都起着重要的作用。</p><p>在有理数计算中，递归可以用于对表达式进行求值。当遇到复杂的表达式时，可以通过递归的方式将其分解为更简单的子表达式，并依次对子表达式进行求值，最终得到整个表达式的结果。递归的思想允许我们逐级展开表达式，直到达到基本的有理数计算操作。</p><p>类似地，在整体优化问题中，递归可以用于展平问题的层次结构。当优化问题包含多个层次的子问题或子图时，我们可以通过递归的方式将其展平为单层的问题。递归地处理每个子问题，将其转化为独立的决策变量、约束和目标函数，并最终将所有子问题的变量和约束整合到一个层次的优化模型中。</p><p>通过递归展平优化问题，我们可以减少问题的复杂性，并将其转化为更简单的形式。这有助于更好地理解问题结构，减少建模和求解的复杂度，并提供更高效的优化算法。递归展平可以使优化问题更易于理解、分析和求解，并为问题的优化求解提供更有效的方法。</p><p>需要注意的是，递归展平优化问题时，需要考虑子问题之间的相互作用和约束，以确保整体模型的一致性和有效性。适当的递归策略和合理的子问题划分可以使优化问题的求解更加高效和可行。</p><p>综上所述，递归在有理数计算表达式求值和整体优化问题展平中都发挥着关键作用。它们都利用递归的思想将复杂的问题分解为更简单的子问题，并通过逐级处理子问题来实现问题求解。</p><p><strong>我们以在操场上列队来类比一下</strong></p><p>我们在操场上排队的时候，按学院、班级、宿舍的顺序进行了排队，但是在主席台上的人看来，就只有第几行第几列的队员。这就是建立模型和模型展平。</p><p>在操场上列队的过程可以类比为一个层次化的结构，按学院、班级和宿舍的顺序进行排队。在这个层次化的结构中，每个层次都有一定的组织和规则，例如学院内按照班级划分，班级内按照宿舍划分。</p><p>当我们将这个列队过程建立为一个模型时，我们可以使用层次化的方式进行建模，将学院、班级和宿舍作为模型中的子结构。每个子结构都有自己的决策变量（队员的位置）、约束（按照规则排队）和目标函数（如最小化队伍长度）。</p><p>然而，对于主席台上的人来说，他们只看到一排一排的队员，而不知道具体的层次结构。这就是模型展平的概念。在模型展平过程中，我们将整个层次化的结构简化为一系列队员的排列顺序。对于主席台上的人来说，他们只需要知道每个队员在队伍中的位置即可，而无需关心队员所属的学院、班级和宿舍。</p><p>在优化问题中，建立模型类似于操场上的层次化排队，将问题分解为多个子问题，并为每个子问题定义决策变量、约束和目标函数。然后，通过模型展平的过程，将问题简化为一个整体的优化模型，只关注决策变量的排列顺序和其相互之间的约束关系。</p><p>这种建模和展平的思想可以帮助我们理清复杂问题的结构，减少问题的复杂性，并将问题转化为更简单的形式进行优化求解。同时，模型展平也有助于提高求解效率，简化优化算法的实现和应用。</p><p>总而言之，操场上的排队过程提供了一个生动的类比，帮助我们理解建模和模型展平的概念。通过层次化建模和模型展平，我们可以更好地处理复杂问题，并为问题的优化求解提供有效的方法。</p><h2 id="plasmo-jl的相关信息" tabindex="-1"><a class="header-anchor" href="#plasmo-jl的相关信息" aria-hidden="true">#</a> Plasmo.jl的相关信息</h2>',33),h={href:"https://github.com/plasmo-dev/Plasmo.jl",target:"_blank",rel:"noopener noreferrer"},i={href:"https://zavalab.engr.wisc.edu/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.proquest.com/docview/2434727631?pq-origsite=gscholar&fromopenview=true",target:"_blank",rel:"noopener noreferrer"};function m(f,u){const a=t("ExternalLinkIcon");return s(),n("div",null,[_,p("p",null,[e("项目网址："),p("a",h,[e("https://github.com/plasmo-dev/Plasmo.jl"),o(a)]),e("。")]),p("p",null,[e("开发组织："),p("a",i,[e("https://zavalab.engr.wisc.edu/"),o(a)]),e("。")]),p("p",null,[e("博士论文: "),p("a",d,[e("Graph-Based Modeling and Simulation of Cyber-Physical Systems"),o(a)]),e("。")])])}const b=r(c,[["render",m],["__file","9-优化问题建模之递归建模方法.html.vue"]]);export{b as default};
