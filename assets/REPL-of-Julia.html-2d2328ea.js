import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,f as s}from"./app-2f5a3223.js";const l={},i=s(`<h1 id="julia-的-repl" tabindex="-1"><a class="header-anchor" href="#julia-的-repl" aria-hidden="true">#</a> julia 的 REPL</h1><p>命令 julia 为我们提供了一个简易但足够强大的编程环境。这就是 REPL 环境。REPL就是Read-Eval-Print Loop，就是“读取-求值-输出-循环”，也就是julia跟我们打交道的交互式对话界面。我们启动julia后，面对的就是julia的REPL。像Python、Ruby这类现代的动态编程语言大都具备REPL环境。</p><p>Julia 的 REPL 环境非常有用，尤其是在我们进行试验性编程的时候。我们可以在其中试着执行一些代码片段，并在确认无误之后把这些片段在源码文件中组装起来，形成真正的程序。因此，REPL 环境绝对算得上一个优秀的编程学习助手。</p><p>在Julia的REPL中共有四种模式，分别是正常（交互）模式、package模式、help模式和shell模式。</p><h3 id="_1-help模式" tabindex="-1"><a class="header-anchor" href="#_1-help模式" aria-hidden="true">#</a> （1）help模式</h3><p>在Julia提示符下按“？”键进入help模式，该模式下可用来查询操作用法。</p><h3 id="_2-shell模式" tabindex="-1"><a class="header-anchor" href="#_2-shell模式" aria-hidden="true">#</a> （2）shell模式</h3><p>在Julia提示符下按“;”键进入shell模式，可以在此模式下执行shell命令。linux下是执行shell命令，windows下则是执行对应的命令提示符下的命令。</p><p>因此，可以在该模式下使用如下代码，运行该文件夹下的“.jl”文件：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>julia hello_julia<span class="token punctuation">.</span>jl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以执行如下的代码显示当前目录下的文件列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">pwd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-package模式" tabindex="-1"><a class="header-anchor" href="#_3-package模式" aria-hidden="true">#</a> （3）package模式</h3><p>在Julia提示符下按“]”键进入package模式，在该模式下进行安装包和卸载包的操作。此模式是用来管理程序包的。比如，在该模式下输入add &lt;程序包的名称&gt;就可以安装某个新的程序包。又比如，输入update &lt;程序包的名称&gt;就可以更新某个已安装的程序包。还比如，仅输入up并回车就可以更新所有已安装的程序包。输入rm &lt;程序包的名称&gt;则可以删除某个程序包。</p><h3 id="_4-正常-交互-模式" tabindex="-1"><a class="header-anchor" href="#_4-正常-交互-模式" aria-hidden="true">#</a> （4）正常（交互）模式</h3><p>在以上三种模式中，按“backspace”键回到正常模式。julia&gt;是 Julia 的 REPL 环境下的提示符。在这种模式下，我们可以输入 Julia 语言的任何表达式，并让它帮我们计算结果。</p><p>在正常模式下，我们可以尝试运行一下如下代码看看系统的反应：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token keyword">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用“Pkg”这个包查看安装使用了哪些包，代码如下：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code><span class="token keyword">using</span> Pkg
Pkg<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用以下代码升级安装的库：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>Pkg<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用以下代码查看所在的文件路径，并且切换文件路径</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>pwd<span class="token punctuation">(</span><span class="token punctuation">)</span>
cd<span class="token punctuation">(</span><span class="token string">&quot;c:\\\\Users\\\\mingt\\\\Desktop&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,24),p=[i];function u(t,d){return e(),n("div",null,p)}const o=a(l,[["render",u],["__file","REPL-of-Julia.html.vue"]]);export{o as default};
