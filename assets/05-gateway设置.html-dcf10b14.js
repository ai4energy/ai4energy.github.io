import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-40ae522b.js";const o={},p=e(`<h1 id="gateway设置" tabindex="-1"><a class="header-anchor" href="#gateway设置" aria-hidden="true">#</a> GateWay设置</h1><h2 id="网关和反向代理" tabindex="-1"><a class="header-anchor" href="#网关和反向代理" aria-hidden="true">#</a> 网关和反向代理</h2><p>我们拥有一个域名<code>mydomain.com</code>，并希望在其下承载多种服务。目前，我们考虑了以下两种实现方式：</p><ol><li><p><strong>子域名与虚拟主机</strong>：为每一项服务设置一个子域名，并在服务器上使用虚拟主机（VirtualHost）配置进行区分和管理。</p></li><li><p><strong>目录反向代理</strong>：将不同的服务放在<code>mydomain.com</code>的不同目录下，并通过反向代理配置将这些目录定向到各自的后端服务器。</p></li></ol><p>此时我们需要一个反向代理服务器。</p><p>反向代理服务器将作为中介站在客户端和您的各种后端服务之间。当客户端发出请求时，反向代理服务器会根据请求的URL（特别是其目录部分）来决定将请求转发到哪个后端服务器。</p><p>例如，假设您有两个服务，一个是<code>mydomain.com/serviceA</code>，另一个是<code>mydomain.com/serviceB</code>。当反向代理服务器收到指向<code>/serviceA</code>的请求时，它会将这些请求转发到为<code>serviceA</code>配置的后端服务器；同理，<code>/serviceB</code>的请求也会被转发到对应的后端服务器。</p><p>反向代理服务器还可以提供其他的功能，如：</p><ul><li><p><strong>负载均衡</strong>：当有多个后端服务器提供相同的服务时，反向代理可以均匀地将请求分配给这些服务器，以确保每个服务器的负载都保持在合理的范围内。</p></li><li><p><strong>SSL/TLS 终结</strong>：如果您的服务需要加密，您可以在反向代理服务器上配置SSL/TLS，让它处理所有与加密相关的事务，而后端服务器则可以处理未加密的请求。</p></li><li><p><strong>缓存</strong>：反向代理可以为经常被请求的内容提供缓存功能，从而加快响应速度。</p></li></ul><p>常见的反向代理服务器软件有Nginx、Apache、HAProxy等，您可以根据自己的需要和熟悉程度选择合适的软件进行配置。</p><p>我们不准备使用apisix之类的，我们只想使用nginx，使问题变得简单。</p><p>Nginx 是一个功能强大且性能卓越的反向代理服务器，并且在实际应用中已经被广泛采用。使用 Nginx 作为反向代理确实可以简化配置并确保稳定性。</p><p>APIsix 是一个高性能、实时 API 网关，提供负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等众多功能。它基于 Nginx 与 etcd 构建，使用 Lua 语言来实现其核心功能。APIsix 是为了满足现代微服务、云原生等复杂场景设计的 API 网关，适用于需要高度定制和扩展的场合。但是我们的需求比较简单，仅仅需要基本的反向代理功能，那么使用 Nginx 就足够了。</p><h2 id="反向代理nginx-proxy设置" tabindex="-1"><a class="header-anchor" href="#反向代理nginx-proxy设置" aria-hidden="true">#</a> 反向代理Nginx-proxy设置</h2><p><code>nginx-proxy</code> 是一个受欢迎的 Docker 包，它为运行在 Docker 容器内的 web 应用提供自动的 Nginx 反向代理服务。这个项目利用 Docker 的 API 来自动发现需要代理的服务，并更新 Nginx 的配置。</p><p>使用 <code>nginx-proxy</code> 的主要优势：</p><ol><li><strong>自动化</strong>：只要为您的应用容器设置正确的环境变量，<code>nginx-proxy</code> 就会自动为您创建相应的反向代理配置。</li><li><strong>简洁</strong>：您不再需要手动编辑 Nginx 的配置文件来为每个新的服务创建反向代理。</li><li><strong>Let&#39;s Encrypt 整合</strong>：通过与 <code>letsencrypt-nginx-proxy-companion</code> 一同使用，<code>nginx-proxy</code> 可以自动为您的域名生成和续订 SSL 证书。</li><li><strong>适应性</strong>：它非常适合动态变化的环境，如多阶段部署或者经常有新服务上线的环境。</li></ol><p>基本的使用流程是：</p><ol><li>运行 <code>nginx-proxy</code> 容器。</li><li>当您要运行一个新的 web 服务时，只需要在该容器的环境变量中设置 <code>VIRTUAL_HOST</code>（指定该服务的域名或子域名）。</li><li><code>nginx-proxy</code> 会自动检测到新的容器，并更新其 Nginx 配置以提供相应的反向代理。</li></ol><p>这个项目确实简化了在 Docker 环境中设置反向代理的过程，非常适合需要快速部署和扩展的场景。</p><p>以下是一个使用<code>nginx-proxy</code>的典型<code>docker-compose.yml</code>:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;2&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nginx-proxy</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginxproxy/nginx<span class="token punctuation">-</span>proxy
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>proxy
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;80:80&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;443:443&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/tmp/docker.sock<span class="token punctuation">:</span>ro
      <span class="token punctuation">-</span> /srv/nginx<span class="token punctuation">-</span>proxy/conf.d<span class="token punctuation">:</span>/etc/nginx/conf.d
      <span class="token punctuation">-</span> /srv/nginx<span class="token punctuation">-</span>proxy/certs<span class="token punctuation">:</span>/etc/nginx/certs
      <span class="token punctuation">-</span> /srv/nginx<span class="token punctuation">-</span>proxy/vhost.d<span class="token punctuation">:</span>/etc/nginx/vhost.d
      <span class="token punctuation">-</span> /srv/nginx<span class="token punctuation">-</span>proxy/html<span class="token punctuation">:</span>/usr/share/nginx/html

  <span class="token key atrule">whoami</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> jwilder/whoami
    <span class="token key atrule">expose</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8000&quot;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> VIRTUAL_HOST=whoami.local
      <span class="token punctuation">-</span> VIRTUAL_PORT=8000

  <span class="token key atrule">nginx-proxy-acme</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginxproxy/acme<span class="token punctuation">-</span>companion
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>proxy<span class="token punctuation">-</span>acme
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> DEFAULT_EMAIL=<span class="token punctuation">[</span>YOUR_EMAIL_HERE<span class="token punctuation">]</span>
    <span class="token key atrule">volumes_from</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> nginx<span class="token punctuation">-</span>proxy
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock<span class="token punctuation">:</span>ro
      <span class="token punctuation">-</span> /srv/nginx<span class="token punctuation">-</span>proxy/acme<span class="token punctuation">:</span>/etc/acme.sh

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
   <span class="token key atrule">default</span><span class="token punctuation">:</span>
       <span class="token key atrule">external</span><span class="token punctuation">:</span>
          <span class="token key atrule">name</span><span class="token punctuation">:</span> mynginxgroup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请在 <code>[YOUR_EMAIL_HERE]</code> 处替换为您的邮箱地址或使用其他非敏感信息替代，以保证配置文件的完整性和功能性。</p><h2 id="backend的服务器" tabindex="-1"><a class="header-anchor" href="#backend的服务器" aria-hidden="true">#</a> Backend的服务器</h2><p>当您要运行一个新的服务时，我们使用这个nginx-proxy作为前哨，后端只需要启动一组docker-compose，并设置好在该容器的\`VIRTUAL_HOST\`\`即可。以web服务为例，比如我们则可以启动另外一个docker-compose:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;2&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>

  <span class="token key atrule">web-service</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>alpine
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>container
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> VIRTUAL_PORT=80
      <span class="token punctuation">-</span> VIRTUAL_HOST=<span class="token punctuation">[</span>YOUR_DOMAIN_1<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>YOUR_DOMAIN_2<span class="token punctuation">]</span>
      <span class="token punctuation">-</span> LETSENCRYPT_HOST=<span class="token punctuation">[</span>YOUR_DOMAIN_1<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>YOUR_DOMAIN_2<span class="token punctuation">]</span>
      <span class="token punctuation">-</span> LETSENCRYPT_EMAIL=<span class="token punctuation">[</span>YOUR_EMAIL<span class="token punctuation">]</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /srv/www.yourdomain/data<span class="token punctuation">:</span>/usr/share/nginx/html

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
   <span class="token key atrule">default</span><span class="token punctuation">:</span>
       <span class="token key atrule">external</span><span class="token punctuation">:</span>
          <span class="token key atrule">name</span><span class="token punctuation">:</span> mynginxgroup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您需要在 <code>[YOUR_DOMAIN_1]</code>, <code>[YOUR_DOMAIN_2]</code> 和 <code>[YOUR_EMAIL]</code> 的位置填入适当的信息。</p><p>此配置提供了一个通用的 <code>nginx:alpine</code> 基础的web服务，与Let&#39;s Encrypt集成以自动处理SSL证书。</p><p>您应该在 <code>[YOUR_DOMAIN_1]</code>, <code>[YOUR_DOMAIN_2]</code> 和 <code>[YOUR_EMAIL]</code> 的位置填入适当的信息。</p><p>现在解释一下您提供的 <code>docker-compose</code> 文件：</p><ul><li><p><strong>version</strong>: 定义了 docker-compose 文件的版本，这里使用的是 &#39;2&#39;。</p></li><li><p><strong>services</strong>:</p><ul><li><p><strong>web-service</strong>: 这是一个服务定义的名称，该服务运行的是基于 <code>nginx:alpine</code> 的镜像。<code>nginx:alpine</code> 是一个使用 Alpine Linux 作为基础的轻量级 nginx 容器。</p><ul><li><p><strong>container_name</strong>: 定义了容器的名称。</p></li><li><p><strong>environment</strong>: 定义了一系列的环境变量，用于配置容器。</p><ul><li><code>VIRTUAL_PORT</code>: 为该服务定义的端口。</li><li><code>VIRTUAL_HOST</code>: 定义了此服务应该响应的域名。</li><li><code>LETSENCRYPT_HOST</code>: 定义了需要 Let&#39;s Encrypt 为其提供 SSL 证书的域名。</li><li><code>LETSENCRYPT_EMAIL</code>: 定义了用于 Let&#39;s Encrypt 证书注册和恢复的电子邮件地址。</li></ul></li><li><p><strong>volumes</strong>: 此处挂载了一个主机目录到容器的 nginx 静态文件目录，使得您可以直接在主机上编辑网站内容，而不需要重建或重启容器。</p></li></ul></li></ul></li><li><p><strong>networks</strong>:</p><ul><li><strong>default</strong>: 定义了一个网络设置。此处的 <code>external</code> 指明该网络在 Docker 外部已经存在，并且其名称是 <code>mynginxgroup</code>。</li></ul></li></ul><p>这个配置是为 web 服务准备的，基于 nginx 的 web 服务器，同时也为其配置了 Let&#39;s Encrypt SSL。</p><h2 id="基于目录的反向代理" tabindex="-1"><a class="header-anchor" href="#基于目录的反向代理" aria-hidden="true">#</a> 基于目录的反向代理</h2><p>即便如此，我们需要把<code>mydomain.com/apps</code>反向到不同的后端的时候，只需要在<code>nginx-proxy</code>的<code>vhost.d</code>目录中设置相应的文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>location /apps/ <span class="token punctuation">{</span>
    <span class="token comment"># 删除/app前缀</span>
    rewrite ^/apps(/.<span class="token important">*)$</span> $1 break;

    <span class="token comment"># 反向代理到目标域名</span>
    proxy_pass http<span class="token punctuation">:</span>//apps.mysomedomain.cn;

    <span class="token comment"># 以下是其他反向代理的相关设置，可以根据需求进行调整</span>
    proxy_set_header Host $host;
    proxy_set_header X<span class="token punctuation">-</span>Real<span class="token punctuation">-</span>IP $remote_addr;
    proxy_set_header X<span class="token punctuation">-</span>Forwarded<span class="token punctuation">-</span>For $proxy_add_x_forwarded_for;
    proxy_set_header X<span class="token punctuation">-</span>Forwarded<span class="token punctuation">-</span>Proto $scheme;
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置是一个经典的 <code>nginx</code> 反向代理设置。这在 <code>nginx-proxy</code> 的上下文中特别有用，因为它允许您为特定的路径设置自定义的代理行为。</p><p>下面解释一下这段配置：</p><ol><li><p><strong><code>location /apps/</code></strong>: 这表示所有以 <code>/apps/</code> 开头的请求都会进入这个配置块。</p></li><li><p><strong><code>rewrite ^/apps(/.*)$ $1 break;</code></strong>: 这行代码的作用是去掉 URL 中的 <code>/apps</code> 前缀。例如，如果有一个请求的 URL 是 <code>mydomain.com/apps/somepath</code>，它会被重写为 <code>apps.mysomedomain.com/somepath</code>。</p></li><li><p><strong><code>proxy_pass http://apps.mysomedomain.com;</code></strong>: 这行代码将请求转发到 <code>apps.mysomedomain.com</code>，这是后端服务器的地址。</p></li><li><p><strong><code>proxy_set_header</code></strong>: 这些指令设置代理请求的 HTTP 头部信息。例如，<code>proxy_set_header Host $host;</code> 保证了原始请求的 <code>Host</code> 头部信息被传递到后端服务器。</p></li></ol><p>这种配置非常有用，特别是当您希望将一个域名下的多个路径反向代理到不同的后端服务时。通过将特定路径（如 <code>/apps</code>）代理到另一个域名或服务，您可以轻松地在同一个域名下组织和管理多个服务。</p><h2 id="跨节点的代理" tabindex="-1"><a class="header-anchor" href="#跨节点的代理" aria-hidden="true">#</a> 跨节点的代理</h2><p>如果我们在网关机A上装了nginx-proxy，在同一个网段上有个服务器B，在B上启用了docker-compose，设置了virtual_host，要是想让nginx-proxy把某些服务的backend设置成B上的这个docker-compose该如何做呢？</p><p>如果你想要在机器A（带有 nginx-proxy）上为机器B上的容器提供代理服务，那么你需要在机器A的nginx-proxy上进行扩展配置。你可以在 nginx-proxy 上手动添加一个配置，指向机器B上的容器IP地址和端口。</p><p>但是这种方法不会自动更新，除非你创建一个定制版本的 nginx-proxy 来远程连接到机器B并监听其 Docker 守护程序的事件。</p><p>在<code>/srv/nginx-proxy/conf.d</code>中建立<code>foo.conf</code>，它将被挂载在<code>nginx-proxy</code>的<code>/etc/nginx/conf.d</code>。在<code>foo.conf</code>中设置<code>upstream</code>和<code>proxy_pass</code>即可。</p>`,44),c=[p];function i(t,l){return s(),a("div",null,c)}const u=n(o,[["render",i],["__file","05-gateway设置.html.vue"]]);export{u as default};
