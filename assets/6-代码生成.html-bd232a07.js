import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-65858a06.js";const p={},t=e(`<h1 id="代码生成" tabindex="-1"><a class="header-anchor" href="#代码生成" aria-hidden="true">#</a> 代码生成</h1><p>计算，就是用计算机处理模型。处理模型有时候是生成另一套代码，我们讲一讲代码生成。</p><h2 id="代码生成的常用方式" tabindex="-1"><a class="header-anchor" href="#代码生成的常用方式" aria-hidden="true">#</a> 代码生成的常用方式</h2><p>代码生成是软件开发过程中的一个重要环节。常用的代码生成方法包括字符替换、模板和抽象语法树。</p><ol><li><p>字符替换：字符替换是最简单的代码生成方法之一。通过定义一些占位符，然后将这些占位符替换为实际的代码片段。这种方法通常适用于生成简单的代码片段或者进行一些简单的文本替换操作。</p></li><li><p>模板：模板是一种更灵活的代码生成方法。通过定义一些代码模板，其中包含一些占位符或者表达式，然后根据具体的需求填充这些占位符，生成最终的代码。模板可以包含条件判断、循环等控制结构，使得生成的代码更加灵活和可扩展。</p></li><li><p>抽象语法树（AST）：AST是一种更高级的代码生成方法，它通过解析源代码构建一个抽象的语法树表示，然后对这个语法树进行分析和转换，最终生成目标代码。AST可以提供更高级的代码操作能力，例如对代码进行重构、优化等。它通常用于编译器、静态分析工具等领域。</p></li></ol><p>这些代码生成方法各有优劣，选择合适的方法取决于具体的应用场景和需求。在实际开发中，可以根据任务的复杂性、生成代码的灵活性要求等因素进行选择。</p><h2 id="看看例子吧" tabindex="-1"><a class="header-anchor" href="#看看例子吧" aria-hidden="true">#</a> 看看例子吧</h2><p>以下是一些简单的例子来演示这些代码生成方法：</p><ol><li>字符替换：<br> 假设我们有一个简单的代码片段，其中包含一个占位符<code>{name}</code>，我们想要根据不同的名字生成对应的代码。可以使用字符替换方法实现：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 输入</span>
name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span>
code_template <span class="token operator">=</span> <span class="token string">&quot;print(&#39;Hello, {name}!&#39;)&quot;</span>

<span class="token comment"># 生成代码</span>
generated_code <span class="token operator">=</span> code_template<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;{name}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>generated_code<span class="token punctuation">)</span>

<span class="token comment"># 输出</span>
<span class="token comment"># print(&#39;Hello, John!&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>模板：<br> 假设我们需要生成一个简单的函数，根据传入的参数生成相应的求和代码。可以使用模板方法实现：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 输入</span>
parameters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span>
template <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;
def sum_func({params}):
    result = {a} + {b}
    return result
&#39;&#39;&#39;</span>

<span class="token comment"># 填充模板</span>
params <span class="token operator">=</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>
generated_code <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>params<span class="token operator">=</span>params<span class="token punctuation">,</span> a<span class="token operator">=</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token operator">=</span>parameters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>generated_code<span class="token punctuation">)</span>

<span class="token comment"># 输出</span>
<span class="token comment"># def sum_func(a, b):</span>
<span class="token comment">#     result = a + b</span>
<span class="token comment">#     return result</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>抽象语法树（AST）：<br> 假设我们要生成一个简单的四则运算表达式，并将其转化为逆波兰表达式形式。可以使用AST方法实现：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> ast
<span class="token keyword">import</span> astunparse

<span class="token comment"># 构建抽象语法树</span>
expr <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">&quot;2 * (3 + 4)&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 转化为逆波兰表达式形式</span>
expr <span class="token operator">=</span> astunparse<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
expr <span class="token operator">=</span> expr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
rpn_expr <span class="token operator">=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>expr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>rpn_expr<span class="token punctuation">)</span>

<span class="token comment"># 输出</span>
<span class="token comment"># 2 3 4 + *</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些例子只是简单的示例，实际中的代码生成通常更为复杂。但这些例子可以帮助你理解字符替换、模板和抽象语法树在代码生成中的应用。</p><h2 id="机器学习中pytorch和tensorfkow也用到了代码生成" tabindex="-1"><a class="header-anchor" href="#机器学习中pytorch和tensorfkow也用到了代码生成" aria-hidden="true">#</a> 机器学习中pytorch和tensorfkow也用到了代码生成</h2><p>在机器学习领域中，PyTorch和TensorFlow都使用了代码生成技术，但它们在代码生成的方式和目的上有所不同。</p><ol><li><p>PyTorch：PyTorch是一个流行的深度学习框架，它使用了动态图模型。在PyTorch中，代码生成主要用于构建计算图。当定义神经网络模型时，PyTorch会根据用户提供的代码动态地构建计算图。这种动态图的方式使得用户可以使用常规的编程语言（如Python）的灵活性和控制能力。在运行时，PyTorch会根据输入数据的形状和大小自动生成相应的计算图，以便进行前向传播和反向传播。这种动态图的方式使得PyTorch适用于灵活的模型定义和调试，但也可能带来一些运行时开销。</p></li><li><p>TensorFlow：TensorFlow是另一个广泛使用的深度学习框架，它使用了静态图模型。在TensorFlow中，代码生成主要用于构建计算图的静态表示。用户首先定义计算图的结构，然后通过执行该图来进行计算。TensorFlow会将用户定义的计算图转化为一个优化过的表示形式，以便在不同设备上高效执行。这种静态图的方式允许TensorFlow进行更多的优化，并提供了一些高级特性，如分布式训练和部署。但相对于PyTorch，TensorFlow的模型定义和调试可能需要更多的额外步骤和复杂性。</p></li></ol><p>总之，PyTorch和TensorFlow在机器学习中都使用了代码生成技术，但它们在计算图的构建方式和灵活性上有所不同，以适应不同的开发需求和优化目标。</p><h2 id="从bib到html也是代码生成" tabindex="-1"><a class="header-anchor" href="#从bib到html也是代码生成" aria-hidden="true">#</a> 从bib到html也是代码生成</h2><p>bibtexparser，它可以解析bib文件，然后格式化输出成html网页，也可以认为是一种代码生成。</p><p>bibtexparser是一个Python库，用于解析BibTeX文件并将其转换为其他格式，包括HTML网页。在这种情况下，可以将格式化输出的过程视为一种代码生成。</p><p>通过使用bibtexparser库，你可以将BibTeX文件中的参考文献数据解析为Python对象，然后根据需要进行处理和转换。例如，你可以编写代码来将参考文献数据转换为HTML格式，以便在网页上显示。</p><p>以下是一个简单的示例，演示如何使用bibtexparser库解析BibTeX文件并生成HTML网页：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> bibtexparser
<span class="token keyword">from</span> bibtexparser<span class="token punctuation">.</span>bwriter <span class="token keyword">import</span> BibTexWriter

<span class="token comment"># 读取BibTeX文件</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;references.bib&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bibtex_file<span class="token punctuation">:</span>
    bib_database <span class="token operator">=</span> bibtexparser<span class="token punctuation">.</span>load<span class="token punctuation">(</span>bibtex_file<span class="token punctuation">)</span>

<span class="token comment"># 将解析的参考文献数据转换为HTML格式</span>
html <span class="token operator">=</span> BibTexWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_html<span class="token punctuation">(</span>bib_database<span class="token punctuation">)</span>

<span class="token comment"># 将HTML保存到文件</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;references.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> html_file<span class="token punctuation">:</span>
    html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们首先使用bibtexparser库加载BibTeX文件并将其解析为一个BibDatabase对象。然后，使用BibTexWriter将BibDatabase对象转换为HTML格式的字符串。最后，将生成的HTML字符串写入到文件中。</p><p>通过这种方式，你可以将BibTeX文件中的参考文献数据转换为可在网页上展示的格式。这可以被认为是一种代码生成，因为你使用代码将输入（BibTeX文件）转换为输出（HTML网页），实现了特定格式的转换和生成过程。</p><h2 id="编译过程就是代码生成" tabindex="-1"><a class="header-anchor" href="#编译过程就是代码生成" aria-hidden="true">#</a> 编译过程就是代码生成</h2><p>编译器，如果我们不考虑优化，就是从抽象语法树生成我们的目标代码。</p><p>编译器在不考虑优化的情况下，主要任务就是从抽象语法树（AST）生成目标语言的代码。这个过程被称为代码生成阶段。</p><p>在编译器的工作流程中，代码生成是其中一个重要的阶段，它负责将高级语言（源语言）的抽象语法树转化为目标语言的代码。这个目标语言可以是汇编语言、机器码或者其他编程语言。</p><p>代码生成的过程通常涉及以下几个步骤：</p><ol><li><p>遍历抽象语法树：从根节点开始，遍历整个抽象语法树。这可以通过递归或迭代的方式进行。</p></li><li><p>生成代码：根据每个节点的类型和属性，在目标语言中生成相应的代码。这包括变量声明、赋值语句、条件语句、循环语句等等。</p></li><li><p>处理表达式：在处理表达式时，需要考虑运算符的优先级和结合性。根据目标语言的规则生成相应的表达式代码。</p></li><li><p>管理变量和作用域：在代码生成过程中，需要跟踪变量的声明和作用域，并为其生成正确的目标语言代码。</p></li><li><p>控制流转换：根据源语言中的条件语句和循环语句，生成目标语言中相应的控制流代码，如if-else语句、for循环、while循环等。</p></li><li><p>生成目标文件：将生成的目标语言代码写入目标文件中，以便后续的处理或执行。</p></li></ol><p>需要注意的是，代码生成阶段通常与前面的词法分析、语法分析和语义分析阶段紧密相关。这些阶段共同工作，将源代码转化为抽象语法树，并在代码生成阶段使用该树生成目标代码。</p><p>尽管在不考虑优化的情况下，生成的目标代码可能不是最高效的，但代码生成是编译器的核心任务之一，它将源语言的抽象表示转化为可执行的目标语言代码。</p><h2 id="来一个julia代码生成的例子" tabindex="-1"><a class="header-anchor" href="#来一个julia代码生成的例子" aria-hidden="true">#</a> 来一个Julia代码生成的例子</h2><p>当涉及到Julia语言的代码生成时，一个常见的应用是使用元编程技术生成动态代码。Julia具有强大的元编程功能，可以在运行时生成和操作代码。</p><p>下面是一个简单的示例，演示如何在Julia中使用元编程生成一个函数，该函数根据给定的参数生成对应数量的变量赋值语句：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code><span class="token keyword">function</span> generate_variables<span class="token punctuation">(</span>n<span class="token punctuation">::</span>Int<span class="token punctuation">)</span>
    code <span class="token operator">=</span> <span class="token keyword">quote</span>
        <span class="token comment"># 生成变量赋值语句</span>
        <span class="token operator">$</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">(</span><span class="token string">&quot;x$i = $i&quot;</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
    eval<span class="token punctuation">(</span>code<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment"># 生成3个变量赋值语句</span>
generate_variables<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment"># 打印生成的变量</span>
<span class="token keyword">println</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span>
<span class="token keyword">println</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span>
<span class="token keyword">println</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>generate_variables</code>函数接受一个整数参数<code>n</code>，然后使用元编程技术生成对应数量的变量赋值语句。通过使用<code>quote</code>块和<code>eval</code>函数，我们可以将生成的代码块作为表达式进行求值。</p><p>当调用<code>generate_variables(3)</code>时，它会生成三个变量赋值语句，即<code>x1 = 1</code>、<code>x2 = 2</code>和<code>x3 = 3</code>。然后，我们可以在后续代码中访问生成的变量，如打印它们的值。</p><p>需要注意的是，这只是一个简单的示例，用于演示Julia的代码生成能力。在实际应用中，可以根据具体需求使用更复杂的元编程技术和代码生成模式来生成动态代码。</p><h2 id="一个简单些的代码生成例子" tabindex="-1"><a class="header-anchor" href="#一个简单些的代码生成例子" aria-hidden="true">#</a> 一个简单些的代码生成例子</h2><p>以下是一个更简单的Julia代码生成的例子，供您参考和讲解给学生：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code><span class="token keyword">function</span> generate_hello<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    code <span class="token operator">=</span> <span class="token string">&quot;println(\\&quot;Hello, $name!\\&quot;)&quot;</span>
    eval<span class="token punctuation">(</span>Meta<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment"># 生成打印“Hello, Julia!”的代码</span>
generate_hello<span class="token punctuation">(</span><span class="token string">&quot;Julia&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>generate_hello</code>函数接受一个字符串参数<code>name</code>，然后生成一段打印“Hello, [name]!”的代码。我们使用字符串插值的方式将参数<code>name</code>嵌入到代码字符串中。</p><p>通过调用<code>generate_hello(&quot;Julia&quot;)</code>，它会生成一段打印“Hello, Julia!”的代码，并使用<code>Meta.parse</code>将代码字符串解析为可执行的表达式。然后，我们可以通过<code>eval</code>函数执行生成的代码。</p><p>这个例子比之前的复杂例子更简单，可以更容易地讲解给学生理解。您可以根据需要调整代码生成的具体内容，让学生更好地理解和实践代码生成的概念。</p><h2 id="我们用meta-show-sexpr解释一下" tabindex="-1"><a class="header-anchor" href="#我们用meta-show-sexpr解释一下" aria-hidden="true">#</a> 我们用Meta.show_sexpr解释一下</h2><p><code>Meta.show_sexpr</code>是Julia中的一个函数，用于将表达式转换为S表达式（S-expression）的形式并打印出来。S表达式是一种用于表示程序代码的简单、可读性较高的表达式形式。</p><p>下面是一个示例，演示如何使用<code>Meta.show_sexpr</code>函数将表达式转换为S表达式并打印出来：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>x <span class="token operator">=</span> <span class="token number">1</span>
expr <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>
sexpr <span class="token operator">=</span> Meta<span class="token punctuation">.</span>show_sexpr<span class="token punctuation">(</span>expr<span class="token punctuation">)</span>
<span class="token keyword">println</span><span class="token punctuation">(</span>sexpr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们首先定义了一个变量<code>x</code>，并创建了一个表达式<code>x + 2</code>。然后，我们使用<code>Meta.show_sexpr</code>函数将该表达式转换为S表达式的形式，并将结果存储在变量<code>sexpr</code>中。最后，我们使用<code>println</code>函数将S表达式打印出来。</p><p>输出的结果将类似于下面的形式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(:call, :+, :x, 2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的S表达式表示了一个函数调用，函数名是<code>+</code>，参数是变量<code>x</code>和整数<code>2</code>。</p><p>通过使用<code>Meta.show_sexpr</code>函数，我们可以将Julia中的表达式转换为一种更抽象、可读性较高的形式，方便进行代码分析和理解。这在元编程、代码生成和其他需要对表达式进行操作的场景中特别有用。</p><h2 id="julia一定意义上可理解为高级版的scheme" tabindex="-1"><a class="header-anchor" href="#julia一定意义上可理解为高级版的scheme" aria-hidden="true">#</a> Julia一定意义上可理解为高级版的scheme</h2><p>在某种程度上，可以将Julia理解为高级版的Scheme，因为它们在某些设计理念和特性上有相似之处。下面是一些Julia和Scheme之间的相似之处：</p><ol><li><p>函数作为一等公民：在Scheme和Julia中，函数被视为一等公民，可以像其他值一样传递、存储和操作。这使得函数式编程成为可能，允许编写高阶函数和匿名函数。</p></li><li><p>动态类型系统：Scheme和Julia都具有动态类型系统，允许变量在运行时绑定到不同类型的值。这使得编写灵活的代码和进行动态类型推断成为可能。</p></li><li><p>宏（Macros）支持：Scheme和Julia都具有宏的概念，允许编写宏来进行代码转换和元编程。通过宏，可以在编译时对代码进行转换，增加了语言的表达能力和灵活性。</p></li><li><p>REPL（交互式环境）：Scheme和Julia都提供了REPL，允许用户在交互式环境中逐行执行代码和测试表达式。这使得快速迭代、调试和探索语言特性成为可能。</p></li></ol><p>尽管Julia和Scheme有一些相似之处，但它们也有一些显著的区别。例如，Julia是一门为科学计算和数据分析设计的高性能语言，支持多重派发和并行计算。它还具有直接调用C和Fortran代码的能力，以及广泛的生态系统和丰富的库支持。相比之下，Scheme是一门小而精简的语言，注重简洁性和可扩展性。</p><p>因此，虽然Julia在某些方面可以被看作是高级版的Scheme，但它们在设计目标、应用领域和语言特性上有所不同。</p>`,62),o=[t];function i(l,c){return s(),a("div",null,o)}const d=n(p,[["render",i],["__file","6-代码生成.html.vue"]]);export{d as default};
