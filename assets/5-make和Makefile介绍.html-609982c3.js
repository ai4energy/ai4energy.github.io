import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c,a,b as e,d as p,f as o}from"./app-90accaff.js";const d={},t=o(`<h1 id="make和makefile介绍" tabindex="-1"><a class="header-anchor" href="#make和makefile介绍" aria-hidden="true">#</a> make和Makefile介绍</h1><h2 id="程序的编译和链接" tabindex="-1"><a class="header-anchor" href="#程序的编译和链接" aria-hidden="true">#</a> 程序的编译和链接</h2><h3 id="程序的编译和链接过程" tabindex="-1"><a class="header-anchor" href="#程序的编译和链接过程" aria-hidden="true">#</a> 程序的编译和链接过程</h3><p>当编写C语言程序时，需要将源代码转换为可执行程序的过程包括编译和链接两个主要阶段。下面是以GCC编译器为例的程序的编译和链接过程：</p><ol><li><p>预处理（Preprocessing）：<br> 在编译过程开始之前，预处理器会处理源代码文件（以<code>.c</code>为扩展名）。它执行包括宏展开、头文件包含、条件编译等任务。预处理器会根据包含的头文件和宏定义进行文本替换，生成一个被称为预处理后的源代码文件（通常以<code>.i</code>或<code>.ii</code>为扩展名）。</p></li><li><p>编译（Compilation）：<br> 在这一阶段，编译器会将预处理后的源代码文件转换为汇编语言代码文件（以<code>.s</code>为扩展名），即将C语言代码转化为特定机器平台上的汇编指令。编译器负责检查语法错误和类型错误，并进行相应的优化。</p></li><li><p>汇编（Assembly）：<br> 汇编器（如GNU as）将汇编语言代码文件转换为目标文件（以<code>.o</code>为扩展名），其中包含了机器指令和数据。目标文件是二进制文件，仍然是机器相关的。</p></li><li><p>链接（Linking）：<br> 在链接阶段，链接器（如GNU ld）将目标文件与所需的库文件进行合并，生成最终的可执行程序。链接器解决了符号引用的问题，它将不同目标文件中引用的函数和变量的定义连接在一起，生成一个可执行程序文件。链接器还负责处理库的链接，包括静态库和动态库。</p></li></ol><p>在链接过程中，可能会涉及两种类型的链接：</p><ul><li><p>静态链接（Static Linking）：<br> 在静态链接中，链接器会将所有被引用的库文件的代码和数据复制到最终的可执行文件中。这样，可执行文件就包含了所有所需的库的代码，可以独立运行，而不依赖于系统上是否存在相应的库文件。</p></li><li><p>动态链接（Dynamic Linking）：<br> 在动态链接中，可执行文件只包含对库函数的引用，而实际的库代码和数据存储在共享库文件中。在程序运行时，操作系统的动态链接器将库文件加载到内存，并将引用与实际地址进行关联，以完成链接。这样可以实现代码的共享，减小可执行文件的大小，并允许共享库的更新和替换。</p></li></ul><p>GCC编译器将上述过程整合在一起，可以直接将源代码编译成最终的可执行程序。你可以使用GCC命令来进行整个编译和链接过程，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gcc main.c -o program
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>main.c</code></p><p>是源代码文件，<code>program</code>是生成的可执行程序的名称。</p><p>了解程序的编译和链接过程对于理解make和makefile的工作原理非常重要，因为make工具主要用于自动化构建过程，根据源代码的变化和依赖关系进行编译和链接。</p><h3 id="分步编译和链接" tabindex="-1"><a class="header-anchor" href="#分步编译和链接" aria-hidden="true">#</a> 分步编译和链接</h3><p>当使用GCC编译器进行程序编译和链接时，可以将编译和链接过程分为两步来演示。我们将使用一个简单的C语言程序来进行示例，包含两个源代码文件：<code>main.c</code>和<code>helper.c</code>。<code>main.c</code>文件包含程序的入口函数，<code>helper.c</code>文件包含一个辅助函数。</p><p>以下是演示编译和链接的步骤：</p><ol><li><p>编译（Compilation）：<br> 首先，我们使用GCC编译器将每个源代码文件编译为目标文件（<code>.o</code>文件），并生成对应的汇编代码（<code>.s</code>文件）。</p><p>编译<code>main.c</code>文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gcc -c main.c -o main.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译<code>helper.c</code>文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gcc -c helper.c -o helper.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将生成<code>main.o</code>和<code>helper.o</code>两个目标文件。</p></li><li><p>链接（Linking）：<br> 接下来，我们使用GCC编译器将目标文件链接在一起，生成最终的可执行程序。</p><p>链接目标文件生成可执行程序：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gcc main.o helper.o -o program
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将生成名为<code>program</code>的可执行文件。</p></li></ol><p>完成上述步骤后，你将得到一个名为<code>program</code>的可执行程序，可以通过执行<code>./program</code>来运行它。</p><p>需要注意的是，上述示例中的程序较简单，只包含两个源文件。对于更复杂的项目，可能涉及多个源文件和库文件，并可能需要更复杂的编译和链接规则。在这种情况下，使用make和makefile来自动化构建过程会更加方便和灵活。</p><h3 id="来个例子吧" tabindex="-1"><a class="header-anchor" href="#来个例子吧" aria-hidden="true">#</a> 来个例子吧</h3><ul><li>我需要给学生展示：写个c语言源代码，然后手动编译，一步一步的编译连接生成可执行程序这个过程。使用msys2，mingw64工具链。</li></ul><p>当然，我可以帮你完成这个任务。以下是一个示例的C语言源代码，以及一步一步的编译连接过程，使用MSYS2和MinGW-w64工具链。</p><p>首先，你需要安装MSYS2和MinGW-w64。你可以从官方网站下载并按照说明进行安装。</p><p>然后，创建一个名为 <code>hello.c</code> 的文本文件，将以下代码复制并粘贴进去：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存并关闭文件。</p><p>接下来，打开MSYS2终端，进入你保存 <code>hello.c</code> 文件的目录。</p><p>执行以下命令来安装所需的编译工具：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pacman -S mingw-w64-x86_64-toolchain
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，执行以下命令来编译 <code>hello.c</code> 文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gcc -o hello hello.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将使用GCC编译器将 <code>hello.c</code> 文件编译为可执行文件 <code>hello.exe</code>。</p><p>最后，执行以下命令来运行可执行文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>终端将输出 <code>Hello, World!</code>。</p><p>这就是使用MSYS2和MinGW-w64工具链编译和运行C语言程序的过程。你可以将这些步骤展示给学生，让他们了解C语言程序的编译和执行过程。</p><ul><li>先编译到汇编代码，然后编译到目标代码，再连接，分步展示。<br> 非常抱歉，我误解了你的要求。下面是一个逐步展示编译到汇编代码、编译到目标代码，以及连接的过程。</li></ul><p>假设你已经按照之前提到的步骤安装了MSYS2和MinGW-w64工具链。接下来，我们将使用以下C语言源代码作为示例，并命名为 <code>hello.c</code>：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请按照以下步骤逐步编译、连接和运行代码：</p><p><strong>步骤 1: 编译到汇编代码</strong></p><p>在MSYS2终端中，进入 <code>hello.c</code> 文件所在的目录。</p><p>执行以下命令，将C源代码编译为汇编代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-S</span> <span class="token parameter variable">-o</span> hello.s hello.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将生成一个名为 <code>hello.s</code> 的汇编代码文件。</p><p><strong>步骤 2: 编译到目标代码</strong></p><p>继续执行以下命令，将汇编代码编译为目标代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> hello.o hello.s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将生成一个名为 <code>hello.o</code> 的目标代码文件。</p><p><strong>步骤 3: 连接生成可执行程序</strong></p><p>最后，执行以下命令将目标代码文件连接起来生成可执行程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-o</span> hello hello.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将生成一个名为 <code>hello</code> 的可执行文件。</p><p><strong>步骤 4: 运行程序</strong></p><p>执行以下命令运行可执行程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>终端将输出 <code>Hello, World!</code>。</p><p>通过按照以上步骤，你可以逐步展示将C语言源代码编译到汇编代码，再编译到目标代码，最后连接生成可执行程序的过程。学生可以观察每个阶段生成的文件，以及最终的输出结果。</p><ul><li>请使用分立的两个源文件，便于理解连接。</li></ul><p>当然，我理解了你的要求。下面是一个示例，使用两个分离的源文件来展示编译、汇编、目标代码生成以及连接的过程。</p><p>首先，创建一个名为 <code>main.c</code> 的文件，包含以下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，创建一个名为 <code>hello.c</code> 的文件，包含以下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们将逐步展示编译、汇编、目标代码生成和连接的过程。请按照以下步骤进行：</p><p><strong>步骤 1: 编译到汇编代码</strong></p><p>在MSYS2终端中，进入包含 <code>main.c</code> 和 <code>hello.c</code> 文件的目录。</p><p>执行以下命令，将 <code>main.c</code> 编译为汇编代码 <code>main.s</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-S</span> <span class="token parameter variable">-o</span> main.s main.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行以下命令，将 <code>hello.c</code> 编译为汇编代码 <code>hello.s</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-S</span> <span class="token parameter variable">-o</span> hello.s hello.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>步骤 2: 汇编到目标代码</strong></p><p>继续执行以下命令，将 <code>main.s</code> 和 <code>hello.s</code> 文件汇编为目标代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> main.o main.s
gcc <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> hello.o hello.s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将生成 <code>main.o</code> 和 <code>hello.o</code> 两个目标代码文件。</p><p><strong>步骤 3: 连接生成可执行程序</strong></p><p>最后，执行以下命令将 <code>main.o</code> 和 <code>hello.o</code> 文件连接起来生成可执行程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-o</span> hello main.o hello.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将生成一个名为 <code>hello</code> 的可执行文件。</p><p><strong>步骤 4: 运行程序</strong></p><p>执行以下命令运行可执行程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>终端将输出 <code>Hello, World!</code>。</p><p>通过按照以上步骤，你可以展示将两个分离的源文件编译为汇编代码，然后汇编为目标代码，并最终将它们连接为可执行程序的过程。这将帮助学生更好地理解连接的概念和过程。</p><h3 id="小结一下" tabindex="-1"><a class="header-anchor" href="#小结一下" aria-hidden="true">#</a> 小结一下</h3><p>不论是C还是C++，通常我们首先将源文件编译成中间代码文件，Windows下为.obj文件，UNIX下为.o文件，也被称为目标文件（Object File）。这个过程称为编译（compile）。然后，我们将大量的目标文件链接在一起，生成可执行文件，这个过程称为链接（link）。</p><p>在编译阶段，编译器需要确保语法的正确性以及函数和变量的声明正确。对于后者，通常需要告诉编译器头文件的位置（头文件中应该只包含声明，而定义应放在C/C++文件中）。只要所有语法正确，编译器就能生成中间目标文件。一般来说，每个源文件对应一个中间目标文件（.o文件或.obj文件）。</p><p>在链接阶段，主要是链接函数和全局变量。因此，我们可以使用这些中间目标文件（.o文件或.obj文件）来链接我们的应用程序。链接器不关心函数所在的源文件，只关心函数的中间目标文件（Object File）。通常情况下，由于源文件较多，编译生成的中间目标文件也很多，而在链接时需要明确指出中间目标文件的名称，这对编译非常不方便。因此，我们需要将中间目标文件打包。在Windows下，这种打包方式称为“库文件”（Library File），即.lib文件；而在UNIX下，称为Archive File，即.a文件。</p><p>总结一下，源文件首先会生成中间目标文件，然后使用这些中间目标文件生成可执行文件。在编译阶段，编译器只检查程序的语法和函数、变量的声明。如果函数未被声明，编译器会给出警告，但仍可以生成Object File。而在链接阶段，链接器会在所有的Object File中寻找函数的实现。如果找不到，就会报告链接错误（Linker Error）。在VC（Visual C++）下，这种错误通常为Link 2001错误，表示链接器无法找到函数的实现。你需要指定函数的Object File。</p><h2 id="make和makefile" tabindex="-1"><a class="header-anchor" href="#make和makefile" aria-hidden="true">#</a> make和Makefile</h2><h3 id="为什么需要make和makefile" tabindex="-1"><a class="header-anchor" href="#为什么需要make和makefile" aria-hidden="true">#</a> 为什么需要make和Makefile</h3><p>如果我们的程序依赖成千上万的源代码，而且分布在不同的目录，我们能不能自动化的进行我们程序的构建？我们修改了某个文件，依赖这个文件的所有文件都应该重新编译，而不依赖它的文件应该不需要重新编译。有没有工具实现这一点？</p><p>当然有了。Makefile是一个用于自动化构建过程的文件，它定义了源代码文件的编译规则和依赖关系。尽管Windows的集成开发环境（IDE）通常会为程序员处理这些工作，但了解Makefile对于成为一名优秀和专业的程序员仍然很重要，就像了解HTML标签对于成为一名专业的前端开发人员一样。</p><p>特别是在Unix系统下的软件编译过程中，你不能不自己编写Makefile。会不会编写Makefile从某种程度上反映了一个人是否具备完成大型工程的能力，因为Makefile涉及整个工程的编译规则。在一个工程中，源文件数量众多，按照类型、功能和模块分别存放在多个目录中。Makefile定义了一系列规则，指定哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至可以执行更复杂的功能操作，因为Makefile就像一个Shell脚本，可以执行操作系统命令。</p><p>Makefile的好处在于实现了&quot;自动化编译&quot;。一旦编写完成，只需要运行一个make命令，整个工程将完全自动编译，大大提高了软件开发的效率。make是一个命令工具，用于解释Makefile中的指令。通常情况下，大多数集成开发环境都提供了make命令，例如Delphi的make、Visual C++的nmake，以及Linux下的GNU make。因此，Makefile已成为工程编译的一种常用方法。</p><p>不同厂商的make工具语法各有不同，但它们的本质都是在处理&quot;文件依赖性&quot;。下面将主要介绍GNU make，因为它是应用最广泛、使用最多的make工具，并且符合IEEE 1003.2-1992标准（POSIX.2）。我们将以C/C++源码为基础，涉及一些与C/C++编译相关的知识。关于这方面的内容，请参考相关编译器的文档。</p><p>Makefile定义就是<strong>依赖关系</strong>和<strong>生成规则</strong>。为什么我们没有采用上文的<strong>编译规则</strong>。因为Makefile定义的是更广泛的生成规则，例如文件A从它所依赖的文件B如何生成出来，而不仅仅是程序源文件的编译。</p><h3 id="makefile的一个例子" tabindex="-1"><a class="header-anchor" href="#makefile的一个例子" aria-hidden="true">#</a> Makefile的一个例子</h3><p>当涉及到分步编译和链接的过程时，Makefile可以帮助我们自动化这个过程。下面是一个简单的Makefile示例，展示了如何使用Makefile来编译和链接一个简单的C程序：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment"># 定义编译器和编译选项</span>
CC <span class="token operator">=</span> gcc
CFLAGS <span class="token operator">=</span> -Wall -g

<span class="token comment"># 定义目标文件和依赖关系</span>
TARGET <span class="token operator">=</span> myprogram
OBJS <span class="token operator">=</span> main.o utils.o

<span class="token comment"># 默认目标，即执行make命令时的默认动作</span>
<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>

<span class="token comment"># 链接目标文件生成可执行文件</span>
<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span>

<span class="token comment"># 编译每个源文件生成目标文件</span>
<span class="token target symbol">%.o</span><span class="token punctuation">:</span> %.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>

<span class="token comment"># 清理生成的目标文件和可执行文件</span>
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm -f <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了以下几个内容：</p><ol><li><code>CC</code>：编译器的名称，这里使用gcc。</li><li><code>CFLAGS</code>：编译选项，这里使用-Wall和-g，表示开启所有警告并生成调试信息。</li><li><code>TARGET</code>：目标可执行文件的名称，这里设为myprogram。</li><li><code>OBJS</code>：目标文件的名称列表，这里包括main.o和utils.o。</li></ol><p>Makefile中的规则包括：</p><ol><li><code>all</code>：默认目标，执行make命令时的默认动作，依赖于$(TARGET)。</li><li><code>$(TARGET)</code>：链接目标文件生成可执行文件，依赖于$(OBJS)。</li><li><code>$(OBJS)</code>：编译每个源文件生成目标文件，依赖于对应的.c文件。</li><li><code>%.o</code>：通配符规则，用于编译每个源文件。</li></ol><p>最后，Makefile还包括了一个清理规则：</p><ol><li><code>clean</code>：用于删除生成的目标文件和可执行文件。</li></ol><p>要使用这个Makefile，将其保存为名为&quot;Makefile&quot;（注意大小写）的文件，并将其与源文件放在同一目录下。然后在命令行中运行<code>make</code>命令即可自动编译和链接程序。如果需要清理生成的文件，可以运行<code>make clean</code>命令。</p><p>请注意，该示例中的Makefile只是一个简单的示例，实际项目中可能需要更复杂的Makefile来处理更多的源文件和依赖关系。</p><h3 id="时间戳是make和makefile决定哪些文件需要重新构建的依据" tabindex="-1"><a class="header-anchor" href="#时间戳是make和makefile决定哪些文件需要重新构建的依据" aria-hidden="true">#</a> 时间戳是Make和Makefile决定哪些文件需要重新构建的依据</h3><p>时间戳是Make和Makefile决定哪些文件需要重新构建的依据之一。Make工具会比较目标文件和依赖文件的时间戳，根据时间戳的差异确定是否需要重新构建目标文件。</p><p>在Makefile中，每个目标都有一组依赖文件，表示生成该目标所需要的源文件或其他中间文件。当执行make命令时，Make会检查目标文件和依赖文件的时间戳，如果依赖文件的时间戳比目标文件的时间戳更新，或者目标文件不存在，那么Make就会执行相应的规则重新构建目标文件。</p><p>通过比较时间戳，Make可以避免无需重新构建的部分，从而提高编译的效率。只有在源文件或依赖文件发生了变化，或者目标文件不存在时，Make才会重新构建目标文件。</p><p>需要注意的是，时间戳并不是唯一的依据，Make还会根据文件的依赖关系、规则和命令等进行判断。但时间戳是其中一个重要的判断因素，用于确定哪些文件需要重新构建。</p><h3 id="make的一些变种" tabindex="-1"><a class="header-anchor" href="#make的一些变种" aria-hidden="true">#</a> make的一些变种</h3><p>除了传统的Makefile，还有一些Makefile的变种工具，每个工具都有自己的特点和使用场景。下面是一些常见的Makefile变种工具：</p><ol><li><p>QMake：QMake是Qt框架提供的一个构建工具。它使用一种简化的语法来描述项目的构建过程，并能够自动生成传统Makefile。QMake主要用于Qt项目的构建，可以跨平台使用。</p></li><li><p>NMake：NMake是微软提供的用于Windows平台的构建工具。它使用一种类似于Makefile的语法，并支持Windows平台上的命令和工具。NMake通常与Microsoft Visual Studio一起使用，用于构建Windows平台上的C/C++项目。</p></li><li><p>Wmake：WMake是OpenFOAM（开源计算流体力学软件）项目中自定义的构建工具，用于管理和构建OpenFOAM的源代码和应用程序。OpenFOAM是一个开源的数值计算软件库，用于模拟流体动力学问题。</p></li><li><p>CMake：CMake是一个跨平台的构建工具，它可以生成不同平台上的原生构建脚本（如Makefile、Visual Studio项目等）。CMake使用一种类似于脚本的语法描述项目的构建过程，并具有很高的可移植性和灵活性。CMake广泛应用于C/C++项目的构建。</p></li></ol><p>这些变种工具都是为了简化和自动化项目的构建过程，并提供特定平台或框架的支持。根据项目的需求和开发环境的不同，可以选择合适的构建工具来管理和构建项目。</p><h3 id="关于cmake再多说一点" tabindex="-1"><a class="header-anchor" href="#关于cmake再多说一点" aria-hidden="true">#</a> 关于cmake再多说一点</h3><p>CMake是一个跨平台的开源构建工具，用于管理和自动生成用于构建项目的原生构建脚本，例如Makefile、Visual Studio项目等。它旨在简化跨平台项目的构建过程，提供高度可移植性和灵活性。CMake使用一种名为CMakeLists.txt的文本文件来描述项目的构建规则。</p><p>CMakeLists.txt是CMake的配置文件，其中包含了项目的构建规则和指令。下面是一个简单的CMakeLists.txt示例：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.12</span><span class="token punctuation">)</span>  <span class="token comment"># 指定所需的最低CMake版本</span>

<span class="token keyword">project</span><span class="token punctuation">(</span>MyProject<span class="token punctuation">)</span>  <span class="token comment"># 设置项目名称</span>

<span class="token comment"># 添加源文件</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token property">SOURCES</span>
    src/main.cpp
    src/foo.cpp
    src/bar.cpp
<span class="token punctuation">)</span>

<span class="token comment"># 添加可执行目标</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>myapp <span class="token punctuation">\${</span><span class="token property">SOURCES</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 添加头文件搜索路径</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span>include<span class="token punctuation">)</span>

<span class="token comment"># 添加链接库</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>myapp mylib<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在CMakeLists.txt中，首先使用<code>cmake_minimum_required</code>指令指定所需的最低CMake版本。然后使用<code>project</code>指令设置项目名称。</p><p>接下来，通过使用<code>set</code>指令定义一个变量（这里是<code>SOURCES</code>），用于存储源文件的路径。可以根据项目的实际情况添加更多的源文件。</p><p>使用<code>add_executable</code>指令创建一个可执行目标，将变量<code>SOURCES</code>中的源文件编译为可执行文件（这里是<code>myapp</code>）。</p><p>使用<code>include_directories</code>指令添加头文件搜索路径，以便编译器能够找到所需的头文件。</p><p>最后，使用<code>target_link_libraries</code>指令添加链接库（这里是<code>mylib</code>）到目标可执行文件。</p><p>CMakeLists.txt还支持其他各种指令和选项，可以根据项目的需求进行配置。CMake具有丰富的文档和社区支持，可以更深入地了解其功能和用法。</p><p>要构建项目，可以在命令行中使用CMake来生成适用于特定构建系统的构建文件（例如Makefile或Visual Studio项目），然后使用生成的构建文件来进行编译和构建。</p><p>总的来说，CMake提供了一种简洁而强大的方式来管理项目的构建过程，使得在不同平台和构建系统上的项目构建变得更加灵活和可维护。</p><p><strong>注意：CMake可以根据CMakeLists.txt生成Makefile或者Visual studio的项目文件。</strong></p>`,129),r={href:"https://seisman.github.io/how-to-write-makefile/index.html",target:"_blank",rel:"noopener noreferrer"};function u(k,m){const n=i("ExternalLinkIcon");return l(),c("div",null,[t,a("p",null,[e("关于make和Makefile可以"),a("a",r,[e("参考这里获得更多的信息"),p(n)]),e("。")])])}const h=s(d,[["render",u],["__file","5-make和Makefile介绍.html.vue"]]);export{h as default};
