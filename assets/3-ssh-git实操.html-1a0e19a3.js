import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as r,c as d,a as e,b as s,d as n,w as o,f as p}from"./app-ae566971.js";const c="/assets/image/91Tools/SSH_Git-10_12_40.png",u="/assets/image/91Tools/SSH_Git-10_14_22.png",g={},h=p(`<h1 id="ssh、git与git图形化软件" tabindex="-1"><a class="header-anchor" href="#ssh、git与git图形化软件" aria-hidden="true">#</a> SSH、Git与Git图形化软件</h1><p>!!! tip<br> Contents：SSH、Git与Git的图形化软件</p><pre><code>Contributor: YJY

Email:522432938@qq.com

如有错误，请批评指正。
</code></pre><p>本文介绍ssh、git与git的图形化软件。他们之间的关系为：</p><ul><li>git基于ssh通讯操作</li><li>git图形化软件是操作git的图形化软件</li></ul><h2 id="ssh使用" tabindex="-1"><a class="header-anchor" href="#ssh使用" aria-hidden="true">#</a> SSH使用</h2><h3 id="ssh是什么" tabindex="-1"><a class="header-anchor" href="#ssh是什么" aria-hidden="true">#</a> SSH是什么</h3><p>SSH是一种网络协议，用于计算机之间的加密登录。一个用户从本地计算机，使用SSH协议登录另一台远程计算机，就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p><h3 id="ssh密钥登录原理" tabindex="-1"><a class="header-anchor" href="#ssh密钥登录原理" aria-hidden="true">#</a> SSH密钥登录原理</h3><ol><li>客户端发出认证请求；</li><li>服务器端使用客户端发送的公钥对一个随机的256位的字符串进行加密，并发送给 客户端；</li><li>客户端使用私钥对字符串进行解密，并生成一个MD5值发送给服务器端；</li><li>服务器端根据原始随机字符串生成MD5值进行匹配, 确认客户端身份；</li><li>至此, 双方互相确认对方身份并建立加密信道, 可以正式进行安全通信。</li></ol><h3 id="ssh的两种认证方式" tabindex="-1"><a class="header-anchor" href="#ssh的两种认证方式" aria-hidden="true">#</a> SSH的两种认证方式</h3><ul><li><strong>1.基于口令的安全认证</strong> ：提供正确的用户口令后可以登录远程服务器。</li></ul><p><strong>操作方式</strong>：</p><p>(默认端口为22)</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>ssh user@host

example：
ssh root@127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1
ssh yjy@152<span class="token punctuation">.</span>20<span class="token punctuation">.</span>45<span class="token punctuation">.</span>154
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后输入登录密码进行登录<br> 使用p参数，可以修改端口</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>ssh <span class="token operator">-</span>p 端口号 user@host

example：
ssh <span class="token operator">-</span>p 8080 yjy@152<span class="token punctuation">.</span>20<span class="token punctuation">.</span>45<span class="token punctuation">.</span>154 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子是以8080端口登录</p><ul><li><strong>2.基于密钥的安全认证</strong> ：使用公钥和私钥对的方式对用户进行认证。</li></ul><p>密钥登录首先需要产生<strong>公钥</strong>和<strong>私钥</strong>。</p><p>公钥放在服务端，私钥放在需要远程登录服务端的客户端</p><h5 id="产生公钥和私钥" tabindex="-1"><a class="header-anchor" href="#产生公钥和私钥" aria-hidden="true">#</a> 产生公钥和私钥</h5><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>ssh-keygen <span class="token operator">-</span>t rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<sub>/.ssh文件夹（</sub>为用户目录，windows和linux目录下都会有）下会出现id_rsa与id_rsa.pub两个文件。</p><p><strong>id_rsa是私钥，id_rsa.pub是公钥。</strong></p><h3 id="修改配置文件" tabindex="-1"><a class="header-anchor" href="#修改配置文件" aria-hidden="true">#</a> 修改配置文件</h3><p>之后，在远程主机的ssh配置文件(/etc/ssh/sshd_config)中做如下修改，开启权限。这几项有些是新加上的，有些原来是no：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile <span class="token punctuation">.</span>ssh/authorized_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在服务端存放公钥" tabindex="-1"><a class="header-anchor" href="#在服务端存放公钥" aria-hidden="true">#</a> 在服务端存放公钥</h3><p><strong>方法一：</strong></p><p>将公钥中的一大串字符添加到服务端~/.ssh/authorized_keys文件中去，如果已经存在，那么在后面再添上一条。不建议覆盖，因为这样其它客户端远程登录的公钥就会被覆盖！</p><p><strong>方法二：</strong></p><p>也可以用一段代码自动加过去</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>ssh root@111<span class="token punctuation">.</span>20<span class="token punctuation">.</span>45<span class="token punctuation">.</span>124 <span class="token string">&quot;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&quot;</span> &lt; ~<span class="token operator">/</span><span class="token punctuation">.</span>ssh/id_rsa<span class="token punctuation">.</span>pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条命令由多个语句组成，依次分解开来看：</p><ul><li>（1）&quot;$ ssh user@host&quot;，表示登录远程主机；</li><li>（2）双引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys，表示登录后在远程shell上执行的命令：</li><li>（3）&quot;$ mkdir -p .ssh&quot;的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；</li><li>（4）&#39;cat &gt;&gt; .ssh/authorized_keys&#39; &lt; <sub>/.ssh/id_rsa.pub的作用是，将本地的公钥文件</sub>/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。</li></ul><p><strong>写入authorized_keys文件后，公钥登录的设置就完成了</strong>。</p><p>现在就可以远程免密登录了！</p><h3 id="可能出现的问题" tabindex="-1"><a class="header-anchor" href="#可能出现的问题" aria-hidden="true">#</a> 可能出现的问题</h3><p>基本都是文件权限的问题，比如报错too open。Linux和Windows都会出现这样的情况，相关的解决方案很多，可以直接查找。</p><h3 id="登录github或者码云" tabindex="-1"><a class="header-anchor" href="#登录github或者码云" aria-hidden="true">#</a> 登录github或者码云</h3><p>用ssh怎么操作呢？</p><p>做一个转换，github相当于就是服务端，只需要把公钥放在服务端就可以了。在github上更加方便，因为它都是图形化软件操作。进入设置软件，选择ssh就可以进行调试了（码云同理）。</p><p>配置好了之后，可以进行如下测试：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>ssh <span class="token operator">-</span>T git@github<span class="token punctuation">.</span>com
（ssh <span class="token operator">-</span>T git@gitee<span class="token punctuation">.</span>com）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git的使用" tabindex="-1"><a class="header-anchor" href="#git的使用" aria-hidden="true">#</a> git的使用</h2><h3 id="git和ssh的关联" tabindex="-1"><a class="header-anchor" href="#git和ssh的关联" aria-hidden="true">#</a> git和ssh的关联</h3><p>之前讲了那么多ssh的知识，有什么作用呢？<br> 会了ssh，git基本就会了一半了！</p><h3 id="git的关键要素" tabindex="-1"><a class="header-anchor" href="#git的关键要素" aria-hidden="true">#</a> git的关键要素</h3><ul><li>本地工作区（自己电脑的文件夹）</li><li>远程仓库（远端服务器上的文件夹）</li></ul><h3 id="git基本操作" tabindex="-1"><a class="header-anchor" href="#git基本操作" aria-hidden="true">#</a> git基本操作</h3><ul><li>初始化本地仓库</li><li>从远端拉取</li><li>在本地编写文件</li><li>文件暂存</li><li>提交修改</li><li>提交到远程</li></ul><p><strong>1.初始化本地仓库</strong></p><p>通过git bash或者cmd进入<strong>仓库文件夹</strong><br> 输入：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>简单配置(相关教程也很多，不赘述)：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git config user<span class="token punctuation">.</span>name <span class="token string">&quot;Your Name&quot;</span>
git config user<span class="token punctuation">.</span>email <span class="token string">&quot;email@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>链接到仓库的地址，相当于后面的操作就不需要输入地址了：<br> （origin相当于变量，储存远端的地址）</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git remote add origin <span class="token string">&quot;仓库的ssh地址&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2.从远端拉取</strong></p><p>拉取origin的master分支</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git pull origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3.本地编写文件</strong><br> 编写hello.txt</p><p><strong>4.提交暂存</strong></p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git add <span class="token punctuation">.</span>
<span class="token comment">##或者</span>
git add hello<span class="token punctuation">.</span>txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5.提交修改</strong></p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git commit <span class="token operator">-</span>m <span class="token string">&quot;文件说明&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>6.推送到远端</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="git进阶操作" tabindex="-1"><a class="header-anchor" href="#git进阶操作" aria-hidden="true">#</a> git进阶操作</h3><ul><li>提交多个版本的文件</li><li>回退</li></ul><p><strong>1. 提交多个版本的文件</strong><br> hello.txt 版本1：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>i love you
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提交暂存并修改</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git add hello<span class="token punctuation">.</span>txt
git commit <span class="token operator">-</span>m <span class="token string">&quot;first&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>hello.txt 版本2：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>i love you
I love you
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提交暂存并修改</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git add hello<span class="token punctuation">.</span>txt
git commit <span class="token operator">-</span>m <span class="token string">&quot;second&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>hello.txt 版本3：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>i love you
I love you
I love you too much
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提交暂存并修改</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git add hello<span class="token punctuation">.</span>txt
git commit <span class="token operator">-</span>m <span class="token string">&quot;third&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>接下来查看日志：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如图：<br><img src="https://img-blog.csdnimg.cn/60aa7faa0d0f4d5286032357e95a3177.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAamFrZTQ4NA==,size_20,color_FFFFFF,t_70,g_se,x_16##pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>可以看到，HEAD 指向的是最新版本（head可以理解为当前版本，也就说如果要推到远程就是推这个版本）</p><p><strong>2.回退</strong><br> 接下来回退到上一个版本：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git reset <span class="token operator">--</span>hard HEAD^ <span class="token comment">##回退到上上个就是：HEAD^^</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/60bf07a3a1934f9698e188ee98073f86.png##pic_center" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>那么可以看到head确实变了</p><p>又不想回退了，还是要回到第三次改变的最新版本</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git reset <span class="token operator">--</span>hard 3ed54<span class="token punctuation">(</span>commid的id，只能这样操作<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>其实回退了之后就看不到id了，如果想要回到最新版本，就要记下id，所以说善变是有代价的！</strong></p><p>可以方便查看id与修改信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git log --pretty=oneline
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3.Push</strong><br> 在善变之后，找到了真爱，不管是谁吧，反正证还是要领的。最后就是把文件推送到远端了。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="git图形化软件" tabindex="-1"><a class="header-anchor" href="#git图形化软件" aria-hidden="true">#</a> git图形化软件</h2><p>git图形化软件的好处就是，把以上对git的操作图形化。</p><p>常用且免费的有：</p><ul><li>sourcetree</li><li>vscode中内嵌的git操作页面</li><li>gitkraken（团队版付费，个人免费）</li></ul><h3 id="sourcetree示例" tabindex="-1"><a class="header-anchor" href="#sourcetree示例" aria-hidden="true">#</a> sourcetree示例</h3><p>软件如下：</p><figure><img src="https://img-blog.csdnimg.cn/a165092494a149ff86abe8492d080b32.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAamFrZTQ4NA==,size_20,color_FFFFFF,t_70,g_se,x_16##pic_center" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>比如说clone：</p><figure><img src="https://img-blog.csdnimg.cn/bfcd58f6f5ac4acaab4efd0e73f61bb0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAamFrZTQ4NA==,size_20,color_FFFFFF,t_70,g_se,x_16##pic_center" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>某一个链接仓库的工作软件：</p><figure><img src="https://img-blog.csdnimg.cn/f3cb4c32f83b47d8910c03c974b8f806.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAamFrZTQ4NA==,size_20,color_FFFFFF,t_70,g_se,x_16##pic_center" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h3 id="vscode示例" tabindex="-1"><a class="header-anchor" href="#vscode示例" aria-hidden="true">#</a> vscode示例</h3><figure><img src="`+c+'" alt="图 4" tabindex="0" loading="lazy"><figcaption>图 4</figcaption></figure>',114),m=e("h3",{id:"gitkraken示例",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#gitkraken示例","aria-hidden":"true"},"#"),s(" gitkraken示例")],-1),v={href:"https://www.gitkraken.com/",target:"_blank",rel:"noopener noreferrer"},b=e("figure",null,[e("img",{src:u,alt:"图 5",tabindex:"0",loading:"lazy"}),e("figcaption",null,"图 5")],-1),x=e("p",null,"不管什么软件，拉取、提交、暂存等等都是相同的！",-1),_=e("p",null,[e("strong",null,"如果你明白git的操作原理了，那么这个无师自通，因为本质上sourcetree就是提供一个图形化的操作软件。再没有其它新鲜玩意了！")],-1);function k(f,w){const i=a("RouterLink"),t=a("ExternalLinkIcon");return r(),d("div",null,[h,e("p",null,[s("更多操作见"),n(i,{to:"/docs/Tools/vscode_git.html"},{default:o(()=>[s("vscode中使用git")]),_:1})]),m,e("p",null,[e("a",v,[s("gitkraken网址"),n(t)])]),b,x,_])}const z=l(g,[["render",k],["__file","3-ssh-git实操.html.vue"]]);export{z as default};
