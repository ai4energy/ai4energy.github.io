import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as s,b as n,d as e,f as i}from"./app-2af96935.js";const o={},d=i(`<h1 id="静态链接库和动态链接库" tabindex="-1"><a class="header-anchor" href="#静态链接库和动态链接库" aria-hidden="true">#</a> 静态链接库和动态链接库</h1><p>编程中函数的本质是把具有一定功能性代码整合起来，可以重复的使用。至于函数内部的实现，你可以认为就是一个黑箱。但是我得告诉你我这个黑箱中有什么功能。就像快递收发点一样，怎么运输的你不用管，但是我得有个目录告诉你有些什么选择和对应的收费标准。</p><p>c语言中，stdio等库就是这么个情况，把很多有用的函数封装在一起，成为一个库（静态和动态我们等会儿再说），库里有什么则通过stdio.h这个文件告诉你，同时stdio.h也告诉你了要以什么样的参数方式调用。</p><p>人们可以把一些函数封装成库，提供给用户服务。c语言就有很多这样的库，你写程序的时候，就可以调用c语言自带的这些库函数。编译的时候，你的c语言源代码会编译成.o文件，但是要做成exe文件，还需要把库里所有要用到的那些函数代码嵌入进来，这种方式就是静态的链接到了你的exe文件中。提供的这些库，就称呼为静态链接库。</p><p>而如果某些函数使用率非常的高，或者你自己脑回路清奇，或者乐意，你也可以把那些用到的函数不嵌入进来，只是告诉你的exe程序，需要用到某个库中的某个函数，在运行的时候才加载那个库，调用库里的函数。这样的方式就是动态链接库。</p><p>在windows下，静态链接库一般是lib为后缀名，动态链接库一般是dll为后缀名。</p><p>在linux下，静态链接库一般是a为后缀名，动态链接库一般是so为后缀名。</p><p>在mac os x 下，动态链接库一般是dylib为后缀名。</p><p>我们在julia中可以很方便的调用动态链接库里的函数。详情请见julia调用dll中的函数。</p><h2 id="静态链接库和动态链接库是什么" tabindex="-1"><a class="header-anchor" href="#静态链接库和动态链接库是什么" aria-hidden="true">#</a> 静态链接库和动态链接库是什么</h2><p>动态链接库（Dynamic Link Library，DLL）是一种在多个程序之间共享代码和数据的可执行文件格式。DLL包含一组可重用的函数、类、变量和资源，可以被不同的应用程序或进程调用和使用。</p><p>与静态链接库（Static Link Library）不同，DLL在运行时才加载到内存中，并且可以由多个应用程序同时使用。这种共享的特性带来了一些优势：</p><p>节省内存空间：由于多个应用程序可以共享同一个DLL，所以不同的应用程序不需要在内存中加载相同的代码和数据，从而节省了内存空间。</p><p>代码和数据的更新和维护：如果需要更新DLL中的代码或数据，只需更新DLL本身，而不需要重新编译和链接所有使用该DLL的应用程序。这样可以简化代码的维护和更新过程。</p><p>提供标准化的功能和接口：通过使用DLL，可以将常用的功能和接口封装在一个共享的库中，使得多个应用程序可以共享这些标准化的功能，减少了代码冗余和重复开发。</p><p>在Windows操作系统中，DLL文件具有特定的文件扩展名 &quot;.dll&quot;，并且可以通过动态链接方式进行加载和调用。应用程序可以使用特定的函数调用语法来调用DLL中的函数，从而实现对DLL中功能的使用。</p><p>需要注意的是，由于DLL是共享的，因此在使用DLL时需要注意版本兼容性和依赖关系。如果一个应用程序依赖于某个DLL的特定版本，那么必须确保该DLL的版本可用，并且正确配置应用程序的运行环境，以避免出现兼容性问题。</p><p>总之，动态链接库是一种方便共享代码和数据的可执行文件格式，它提供了灵活性、代码重用和资源共享的好处，被广泛用于软件开发中。</p><h2 id="使用c语言-cmake工具-来个例子" tabindex="-1"><a class="header-anchor" href="#使用c语言-cmake工具-来个例子" aria-hidden="true">#</a> 使用c语言，CMake工具，来个例子</h2><p>当使用CMake构建动态链接库或静态链接库时，您需要编写CMakeLists.txt文件来描述构建过程。下面是一个示例，展示如何使用C语言生成一个动态链接库和一个静态链接库。</p><p>首先，创建一个名为<code>mylib</code>的文件夹，并在其中创建以下文件：</p><ol><li><code>CMakeLists.txt</code> - 用于构建库的CMake文件。</li><li><code>mylib.h</code> - 库的头文件。</li><li><code>mylib.c</code> - 库的源代码文件。</li></ol><p>确保将这些文件放在同一个文件夹中。</p><p>下面是<code>CMakeLists.txt</code>的内容：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>mylib<span class="token punctuation">)</span>

<span class="token comment"># 添加库的源文件</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token property">SOURCES</span> mylib.c<span class="token punctuation">)</span>

<span class="token comment"># 生成动态链接库</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>mylib_shared <span class="token namespace">SHARED</span> <span class="token punctuation">\${</span><span class="token property">SOURCES</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 生成静态链接库</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>mylib_static <span class="token namespace">STATIC</span> <span class="token punctuation">\${</span><span class="token property">SOURCES</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 设置库的输出名称</span>
<span class="token keyword">set_target_properties</span><span class="token punctuation">(</span>mylib_shared <span class="token namespace">PROPERTIES</span> <span class="token property">OUTPUT_NAME</span> <span class="token string">&quot;mylib&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">set_target_properties</span><span class="token punctuation">(</span>mylib_static <span class="token namespace">PROPERTIES</span> <span class="token property">OUTPUT_NAME</span> <span class="token string">&quot;mylib&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 设置库的安装路径</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS mylib_shared mylib_static
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib<span class="token punctuation">)</span>

<span class="token comment"># 设置头文件的安装路径</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>FILES mylib.h DESTINATION include<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用<code>add_library</code>命令来创建动态链接库和静态链接库。<code>set_target_properties</code>命令用于设置库的输出名称，这里设置为&quot;mylib&quot;。<code>install</code>命令用于指定库的安装路径和头文件的安装路径。</p><p>要构建库，可以按照以下步骤进行操作：</p><ol><li>创建一个名为<code>build</code>的文件夹，并进入该文件夹。</li><li>打开终端，导航到<code>build</code>文件夹。</li><li>运行以下命令以生成构建文件：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cmake ..
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>运行以下命令以构建库：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cmake --build .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,31),u=s("code",null,"build",-1),r={href:"http://libmylib.so",target:"_blank",rel:"noopener noreferrer"},k=i(`<p>如果您希望安装库到系统路径中，可以运行以下命令（需要管理员权限）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo make install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将把库文件和头文件安装到默认的系统路径（例如，/usr/local/lib和/usr/local/include）。</p><h2 id="对应的c语言源文件" tabindex="-1"><a class="header-anchor" href="#对应的c语言源文件" aria-hidden="true">#</a> 对应的c语言源文件</h2><p>这里是一个示例的C源文件mylib.c，用于生成动态链接库和静态链接库：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;mylib.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们定义了两个简单的函数：add和subtract。这些函数的实现位于mylib.c文件中，并在mylib.h文件中进行了声明。</p><p>您可以将这个mylib.c文件放在与CMakeLists.txt相同的目录中，然后按照上述说明使用CMake来构建动态链接库和静态链接库。</p><h2 id="头文件呢" tabindex="-1"><a class="header-anchor" href="#头文件呢" aria-hidden="true">#</a> 头文件呢？</h2><p>当生成动态链接库或静态链接库时，您需要一个头文件来声明库中的函数和数据结构。在上一个示例中，我忘记包含头文件<code>mylib.h</code>的内容，非常抱歉。以下是正确的<code>mylib.h</code>头文件内容：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MYLIB_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYLIB_H</span></span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// MYLIB_H</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请将上述代码保存到名为<code>mylib.h</code>的文件中，并确保与<code>CMakeLists.txt</code>和<code>mylib.c</code>文件位于同一个目录中。</p><p>这个头文件声明了两个函数：<code>add</code>和<code>subtract</code>，这些函数的实现位于<code>mylib.c</code>文件中。通过包含这个头文件，其他源文件就可以使用库中的函数。</p><p>希望这次提供的信息对您有所帮助！如果您还有其他问题，请随时提问。</p><h2 id="如何调用" tabindex="-1"><a class="header-anchor" href="#如何调用" aria-hidden="true">#</a> 如何调用</h2><p>当调用生成的动态链接库或静态链接库时，您需要创建一个主函数文件，并使用CMake来构建项目。下面是一个示例，展示如何编写主函数文件和CMakeLists.txt文件来调用生成的库。</p><p>首先，创建一个名为<code>myapp</code>的文件夹，并在其中创建以下文件：</p><ol><li><code>CMakeLists.txt</code> - 用于构建应用程序的CMake文件。</li><li><code>main.c</code> - 主函数文件，用于调用库中的函数。</li></ol><p>确保将这些文件放在同一个文件夹中。</p><p>下面是<code>CMakeLists.txt</code>的内容：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>myapp<span class="token punctuation">)</span>

<span class="token comment"># 添加库的源文件</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token property">SOURCES</span> main.c<span class="token punctuation">)</span>

<span class="token comment"># 生成可执行文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>myapp <span class="token punctuation">\${</span><span class="token property">SOURCES</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 链接动态链接库</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>myapp <span class="token namespace">PRIVATE</span> mylib<span class="token punctuation">)</span>

<span class="token comment"># 设置库的搜索路径</span>
<span class="token keyword">link_directories</span><span class="token punctuation">(</span>/path/to/mylib<span class="token punctuation">)</span>

<span class="token comment"># 设置库的头文件路径</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span>/path/to/mylib<span class="token punctuation">)</span>

<span class="token comment"># 设置可执行文件的安装路径</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS myapp DESTINATION bin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用<code>add_executable</code>命令创建可执行文件，并使用<code>target_link_libraries</code>命令将生成的库（这里假设为<code>mylib</code>）链接到可执行文件中。通过<code>link_directories</code>和<code>include_directories</code>命令，我们设置库的搜索路径和头文件路径。</p><p>要构建应用程序，可以按照以下步骤进行操作：</p><ol><li>创建一个名为<code>build</code>的文件夹，并进入该文件夹。</li><li>打开终端，导航到<code>build</code>文件夹。</li><li>运行以下命令以生成构建文件：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cmake ..
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>运行以下命令以构建应用程序：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cmake --build .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完成上述步骤后，将在<code>build</code>文件夹中生成可执行文件（myapp）。</p><p>如果您希望安装应用程序到系统路径中，可以运行以下命令（需要管理员权限）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo make install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将把可执行文件安装到默认的系统路径（例如，/usr/local/bin）。</p><p>请注意，您需要根据实际情况修改<code>link_directories</code>和<code>include_directories</code>中的路径，以确保正确链接和包含库的头文件。</p><h2 id="使用clion来一个step-by-step生成动态链接库的例子" tabindex="-1"><a class="header-anchor" href="#使用clion来一个step-by-step生成动态链接库的例子" aria-hidden="true">#</a> 使用clion来一个step by step生成动态链接库的例子</h2><p>使用CLion来生成动态链接库的步骤如下：</p><p>步骤 1: 创建一个新的CMake项目</p><ul><li>打开CLion并选择 &quot;Create New Project&quot;。</li><li>在对话框中选择 &quot;C Executable&quot; 并点击 &quot;Next&quot;。</li><li>为项目选择一个适当的名称和位置，并点击 &quot;Create&quot;.</li></ul><p>步骤 2: 创建源文件</p><ul><li>在项目中创建一个新的C源文件，例如 <code>mylib.c</code>。</li><li>编写您的库的实现代码。</li></ul><p>以下是一个简单的示例 <code>mylib.c</code>：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;mylib.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤 3: 创建头文件</p><ul><li>在项目中创建一个新的头文件，例如 <code>mylib.h</code>。</li><li>在头文件中声明您的库的函数和数据结构。</li></ul><p>以下是 <code>mylib.h</code> 的内容：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MYLIB_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYLIB_H</span></span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// MYLIB_H</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤 4: 编辑CMakeLists.txt</p><ul><li>在项目根目录下找到 <code>CMakeLists.txt</code> 文件，并编辑它。</li></ul><p>以下是一个基本的 <code>CMakeLists.txt</code> 示例：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>mylib<span class="token punctuation">)</span>

<span class="token comment"># 添加库的源文件</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token property">SOURCES</span> mylib.c<span class="token punctuation">)</span>

<span class="token comment"># 生成动态链接库</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>mylib <span class="token namespace">SHARED</span> <span class="token punctuation">\${</span><span class="token property">SOURCES</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 设置库的安装路径</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS mylib LIBRARY DESTINATION lib<span class="token punctuation">)</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>FILES mylib.h DESTINATION include<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤 5: 配置和构建项目</p><ul><li>打开CLion中的项目。</li><li>在CLion界面的底部工具栏，点击 &quot;Reload CMake Project&quot; 以加载新的CMake配置。</li><li>在CLion界面的顶部工具栏，点击 &quot;Build&quot; 按钮构建项目。</li></ul><p>完成上述步骤后，CLion将使用CMake构建您的项目，并在构建过程中生成动态链接库。生成的动态链接库将位于 <code>build/lib</code> 目录中。</p><p>如果您希望安装库到系统路径中，可以在 <code>CMakeLists.txt</code> 中添加以下安装规则：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS mylib LIBRARY DESTINATION /usr/local/lib<span class="token punctuation">)</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>FILES mylib.h DESTINATION /usr/local/include<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>Reload CMake Project</code> 和 <code>Build</code> 命令后，库将安装到 <code>/usr/local/lib</code> 和 <code>/usr/local/include</code> 路径中。</p><p>这样，您就可以在CLion中使用CMake逐步生成动态链接库了。如果您有任何进一步的问题，请随时提问。</p><h2 id="调用如何进行" tabindex="-1"><a class="header-anchor" href="#调用如何进行" aria-hidden="true">#</a> 调用如何进行？</h2><p>以下是在CLion中调用动态链接库的步骤：</p><p>步骤 1: 创建一个新的CMake项目</p><ul><li>打开CLion并选择 &quot;Create New Project&quot;。</li><li>在对话框中选择 &quot;C Executable&quot; 并点击 &quot;Next&quot;。</li><li>为项目选择一个适当的名称和位置，并点击 &quot;Create&quot;.</li></ul><p>步骤 2: 创建源文件</p><ul><li>在项目中创建一个新的C源文件，例如 <code>main.c</code>。</li><li>编写您的主函数代码。</li></ul><p>以下是一个简单的示例 <code>main.c</code>：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;mylib.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Addition result: %d\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    result <span class="token operator">=</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Subtraction result: %d\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤 3: 添加动态链接库的引用</p><ul><li>打开项目的 <code>CMakeLists.txt</code> 文件。</li><li>在 <code>add_executable</code> 行之前，添加 <code>add_library</code> 行来引用动态链接库。</li></ul><p>以下是修改后的 <code>CMakeLists.txt</code> 示例：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>myapp<span class="token punctuation">)</span>

<span class="token comment"># 引用动态链接库</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>mylib <span class="token namespace">SHARED</span> <span class="token property">IMPORTED</span><span class="token punctuation">)</span>

<span class="token comment"># 设置动态链接库的路径</span>
<span class="token keyword">set_target_properties</span><span class="token punctuation">(</span>mylib <span class="token namespace">PROPERTIES</span> <span class="token property">IMPORTED_LOCATION</span> /path/to/mylib.so<span class="token punctuation">)</span>

<span class="token comment"># 添加可执行文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>myapp main.c<span class="token punctuation">)</span>

<span class="token comment"># 链接动态链接库</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>myapp <span class="token namespace">PRIVATE</span> mylib<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，您需要将 <code>/path/to/mylib.so</code> 替换为实际的动态链接库文件路径。</p><p>步骤 4: 配置和构建项目</p><ul><li>打开CLion中的项目。</li><li>在CLion界面的底部工具栏，点击 &quot;Reload CMake Project&quot; 以加载新的CMake配置。</li><li>在CLion界面的顶部工具栏，点击 &quot;Build&quot; 按钮构建项目。</li></ul><p>完成上述步骤后，CLion将使用CMake构建您的项目，并在构建过程中将动态链接库引用到可执行文件中。然后，您可以在CLion中运行项目，查看调用动态链接库函数的结果。</p><p>请注意，您需要将 <code>/path/to/mylib.so</code> 替换为实际的动态链接库文件路径，并确保动态链接库文件存在。</p><h2 id="能否简单补充一下cmake是什么" tabindex="-1"><a class="header-anchor" href="#能否简单补充一下cmake是什么" aria-hidden="true">#</a> 能否简单补充一下CMake是什么？</h2><p>当然可以！CMake是一个开源的跨平台构建系统，用于管理软件项目的构建过程。它使用名为CMakeLists.txt的文本文件来描述项目的构建配置，并根据此配置生成适合各种构建工具（如make、Ninja等）的构建文件。</p><p>CMake的主要优势在于它提供了一种简化和抽象构建过程的方式，使得开发者可以更方便地管理复杂的项目结构和依赖关系。通过CMake，您可以编写平台无关的构建脚本，这意味着您可以在不同的操作系统和编译器上使用相同的CMake配置来构建项目。</p><p>CMake使用类似于编程语言的语法，提供了丰富的命令和变量，用于定义项目的源文件、目标、库依赖关系、编译选项等。通过编写CMakeLists.txt文件，您可以描述项目的组织结构、源代码文件、库的构建方式等细节，从而使得构建过程更加灵活和可定制。</p><p>在使用CMake构建项目时，通常的步骤是：创建CMakeLists.txt文件，定义源文件和目标，指定库的依赖关系和链接选项，然后运行CMake来生成构建文件，最后使用构建工具进行实际的构建操作。</p><p>CMake已被广泛使用，并且许多开源项目和跨平台项目都使用CMake来管理其构建过程，使得项目在不同的平台和编译器上更容易构建和交付。</p><h2 id="作业" tabindex="-1"><a class="header-anchor" href="#作业" aria-hidden="true">#</a> 作业</h2><p>请自己完成静态链接库及其调用。使用CLion，CMake。</p><h2 id="视频链接" tabindex="-1"><a class="header-anchor" href="#视频链接" aria-hidden="true">#</a> 视频链接</h2>`,81),m={href:"https://www.bilibili.com/video/BV1WV4y1k72z/",target:"_blank",rel:"noopener noreferrer"};function v(b,y){const a=p("ExternalLinkIcon");return c(),l("div",null,[d,s("p",null,[n("完成上述步骤后，将在"),u,n("文件夹中生成动态链接库（"),s("a",r,[n("libmylib.so"),e(a)]),n("）和静态链接库（libmylib.a）。")]),k,s("p",null,[s("a",m,[n("动态链接库和静态链接库"),e(a)])])])}const x=t(o,[["render",v],["__file","6-静态链接库和动态链接库.html.vue"]]);export{x as default};
