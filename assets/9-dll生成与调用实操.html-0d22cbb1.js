import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as p,e as c,a as n,b as a,d as t,f as s}from"./app-90accaff.js";const u="/assets/image/01CSBase/新建Fortran动态链接库项目.png",d="/assets/image/01CSBase/配置管理器.png",r="/assets/image/01CSBase/配置活动解决方案平台.png",v="/assets/image/01CSBase/选择64位平台.png",m="/assets/image/01CSBase/配置完毕.png",k="/assets/image/01CSBase/查看dll位数.png",b="/assets/image/01CSBase/Creat_and_Call_dll-18_05_04.png",g={},_=s(`<h1 id="动态链接库-dll-的生成与调用实操" tabindex="-1"><a class="header-anchor" href="#动态链接库-dll-的生成与调用实操" aria-hidden="true">#</a> 动态链接库(DLL)的生成与调用实操</h1><p>!!! tip<br> Contents：Julia调用Dll</p><pre><code>Contributor: 杨月宝

Email:812987139@qq.com

如有错误，请批评指正。
</code></pre><h2 id="问题的产生与解决过程概述" tabindex="-1"><a class="header-anchor" href="#问题的产生与解决过程概述" aria-hidden="true">#</a> 问题的产生与解决过程概述</h2><p>我们试图使用Julia来调用热流问题数值计算课程的代码。这些代码是在2003年重新整理的Fortran代码。</p><p>第一步：我们生成了Fortran动态链接库（dll），并尝试使用C语言调用该dll。</p><p>第二步：接着，我们尝试使用C++来调用该dll，并试图使用Julia来调用它。</p><p>第三步：我们配置了VS2013，生成了64位的dll，并使用64位的Julia来调用该dll。</p><h2 id="工作环境" tabindex="-1"><a class="header-anchor" href="#工作环境" aria-hidden="true">#</a> 工作环境</h2><ul><li>Julia版本：Julia 1.7.0-beta2</li><li>使用的Fortran编译器：Intel.Visual.Fortran.Composer.XE.2013-SP1，这是在VS2013中的Fortran编译器。</li><li>开发环境：VSCode（Visual Studio Code）</li></ul><h2 id="实践过程" tabindex="-1"><a class="header-anchor" href="#实践过程" aria-hidden="true">#</a> 实践过程</h2>`,11),h=s('<h3 id="使用fortran生成dll" tabindex="-1"><a class="header-anchor" href="#使用fortran生成dll" aria-hidden="true">#</a> 使用Fortran生成dll</h3><p>新建一个Fortran动态链接库项目</p><figure><img src="'+u+`" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p>在Resource Files中添加一个f90文件，并输入如下内容</p><div class="language-Fortran line-numbers-mode" data-ext="Fortran"><pre class="language-Fortran"><code>SUBROUTINE OUTPUT(a, b, sum)
    !MS$ ATTRIBUTES DLLEXPORT::OUTPUT
    !声明本函数为输出函数
    IMPLICIT NONE
    INTEGER a, b, sum
    sum = a + b
END SUBROUTINE OUTPUT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段Fortran代码定义了一个名为&quot;OUTPUT&quot;的子程序（SUBROUTINE），它接受三个参数：a、b和sum。代码的解释如下：</p><ul><li><p><code>!MS$ ATTRIBUTES DLLEXPORT::OUTPUT</code>：这是一个特定于编译器的注释（directive），用于指示将该函数声明为输出函数（export function），以便其他程序或语言可以调用它。</p></li><li><p><code>IMPLICIT NONE</code>：这是一个编译器指令，用于禁用隐式类型声明。它要求所有变量都必须显式地声明其类型。</p></li><li><p><code>INTEGER a, b, sum</code>：这是变量声明的部分，它指定了a、b和sum都是整数类型的变量。</p></li><li><p><code>sum = a + b</code>：这一行将a和b的值相加，并将结果赋给变量sum。这行代码的作用是计算a和b的和，并将结果存储在sum变量中。</p></li></ul><p>因此，这段代码定义了一个名为&quot;OUTPUT&quot;的子程序，它接受两个整数参数a和b，并计算它们的和，并将结果存储在sum变量中。通过<code>!MS$ ATTRIBUTES DLLEXPORT::OUTPUT</code>的声明，该子程序可以被导出为一个可供其他程序或语言调用的函数。</p><p>Fortran通过下句表示dll输出函数</p><div class="language-Fortran line-numbers-mode" data-ext="Fortran"><pre class="language-Fortran"><code>!MS$ ATTRIBUTES DLLEXPORT::OUTPUT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置编译器属性，选择64位的编译器来生成64位的dll</p><p><img src="`+d+'" alt="1" loading="lazy"><br><img src="'+r+'" alt="1" loading="lazy"><br><img src="'+v+'" alt="1" loading="lazy"><br><img src="'+m+`" alt="1" loading="lazy"></p><p>编译文件后生成项目，就可以在.\\x64\\Debug文件夹下找到生成的dll文件</p><h3 id="使用vs2013开发人员命令提示查看dll位数" tabindex="-1"><a class="header-anchor" href="#使用vs2013开发人员命令提示查看dll位数" aria-hidden="true">#</a> 使用VS2013开发人员命令提示查看dll位数</h3><p>VS2013的工具路径在安装目录下</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>.\\Microsoft Visual Studio 12.0\\Common7\\Tools\\Shortcuts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选择VS2013开发人员命令提示，可以使用dumpbit命令获得dll信息</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>dumpbin /headers 路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>读取上段生成dll，部分结果：</p><figure><img src="`+k+`" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p>以下是更多的参考：</p><p>在Windows下，可以使用以下方法来查看DLL文件的位数：</p><ol><li>打开文件资源管理器（Windows资源管理器）。</li><li>导航到包含所需DLL文件的目录。</li><li>右键单击DLL文件，然后选择&quot;属性&quot;。</li><li>在属性对话框中，切换到&quot;详细信息&quot;选项卡。</li><li>在&quot;属性&quot;部分中，查找&quot;位数&quot;或&quot;架构&quot;相关的信息。通常会显示为&quot;32位&quot;或&quot;64位&quot;。</li><li>查看该信息以确定DLL文件的位数。</li></ol><p>另外，您还可以使用命令行来查看DLL文件的位数：</p><ol><li>打开命令提示符（CMD）或PowerShell。</li><li>使用<code>cd</code>命令导航到包含DLL文件的目录。</li><li>运行以下命令来查看DLL文件的位数：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dumpbin /headers &lt;DLL文件名&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>将 <code>&lt;DLL文件名&gt;</code> 替换为实际的DLL文件名。</li><li>在输出中查找 &quot;x86&quot; 表示32位，&quot;x64&quot; 表示64位。</li></ol><p>通过这些方法，您可以方便地查看DLL文件的位数，以确定其兼容性和与其他程序的配合情况。</p><h3 id="使用c-调用dll" tabindex="-1"><a class="header-anchor" href="#使用c-调用dll" aria-hidden="true">#</a> 使用C++调用dll</h3><p>这里采用动态调用方法，根据网上找到的资料和Fortran程序设计课程讲义，我重新整理了C++代码。</p><p>这部分代码把那几个冒号去了就是C的代码（就是说实质是c语言代码）。</p><p>调试或启动exe文件前，请将dll文件放于EXE文件所在的Debug文件夹内。我的是在E:\\Programs\\program VS2013\\HF_first\\ForDllCreat\\x64\\Debug</p><p>我的解决方案名和Fortran生成dll的方案同名了，请不要混淆。</p><div class="language-C++ line-numbers-mode" data-ext="C++"><pre class="language-C++"><code>#include &lt;stdio.h&gt;
#include &lt;windows.h&gt; // 调用 WINDOWS API 函数所需的头文件

typedef void(*Func)(int *, int *, int *);//定义一个函数指针类型，这个指针类型与被调用函数的输入类型要一一对应

int main()
{
 int a = 1, b = 2, sum;

 //宏定义函数指针类型
 HMODULE hLibrary = ::LoadLibrary(L&quot;ForDLLCreat.dll&quot;); //加载动态库文件，dll名前不加L会报错
 if (hLibrary == NULL)
 {
  printf(&quot;No DLL file exist!\\n&quot;);
  return -1;
 }
 Func dllPro = (Func)::GetProcAddress(hLibrary, &quot;OUTPUT&quot;);
 //获得 Fortran 导出函数的地址
 if (dllPro == NULL)
 {
  printf(&quot;Can not fine the address of the function!\\n&quot;);
  return -2;
 }
 dllPro(&amp;a, &amp;b, &amp;sum);
 printf(&quot;%d + %d = %d\\n&quot;, a, b, sum);
 FreeLibrary(hLibrary); //卸载动态库文件
 return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码是一个使用C语言调用动态链接库（DLL）中函数的示例代码，其解释如下：</p><ul><li><code>#include &lt;stdio.h&gt;</code>：包含了标准输入输出函数的头文件。</li><li><code>#include &lt;windows.h&gt;</code>：包含了调用Windows API函数所需的头文件。</li><li><code>typedef void(*Func)(int *, int *, int *);</code>：定义了一个函数指针类型<code>Func</code>，该指针类型与被调用函数的输入类型一一对应，即接受三个<code>int</code>型指针作为参数且没有返回值。</li><li><code>int main()</code>：主函数的入口。</li><li><code>int a = 1, b = 2, sum;</code>：声明整型变量<code>a</code>、<code>b</code>和<code>sum</code>，并分别初始化<code>a</code>和<code>b</code>的值。</li><li><code>HMODULE hLibrary = ::LoadLibrary(L&quot;ForDLLCreat.dll&quot;);</code>：加载名为&quot;ForDLLCreat.dll&quot;的动态库文件。<code>LoadLibrary</code>函数返回一个句柄（<code>HMODULE</code>），用于后续操作。</li><li><code>if (hLibrary == NULL)</code>：检查动态库文件是否加载成功，如果返回的句柄为空，则说明加载失败，打印错误信息并退出程序。</li><li><code>Func dllPro = (Func)::GetProcAddress(hLibrary, &quot;OUTPUT&quot;);</code>：通过<code>GetProcAddress</code>函数获取动态库中名为&quot;OUTPUT&quot;的函数的地址，并将其赋给函数指针变量<code>dllPro</code>。</li><li><code>if (dllPro == NULL)</code>：检查函数地址是否获取成功，如果返回的地址为空，则说明获取失败，打印错误信息并退出程序。</li><li><code>dllPro(&amp;a, &amp;b, &amp;sum);</code>：通过函数指针调用函数，将<code>a</code>、<code>b</code>和<code>sum</code>的地址作为参数传递给被调用函数。</li><li><code>printf(&quot;%d + %d = %d\\n&quot;, a, b, sum);</code>：打印计算结果。</li><li><code>FreeLibrary(hLibrary);</code>：卸载动态库文件，释放资源。</li><li><code>return 0;</code>：程序正常结束返回值。</li></ul><p>总体而言，该代码加载了一个名为&quot;ForDLLCreat.dll&quot;的动态库文件，并通过函数指针调用了其中的&quot;OUTPUT&quot;函数，将<code>a</code>和<code>b</code>的值作为输入，计算它们的和并将结果存储在<code>sum</code>中，最后打印出计算结果。</p><h3 id="使用julia调用dll" tabindex="-1"><a class="header-anchor" href="#使用julia调用dll" aria-hidden="true">#</a> 使用Julia调用dll</h3>`,36),L={href:"https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/",target:"_blank",rel:"noopener noreferrer"},f=s(`<p>在开始前，请务必确认Julia的位数与所用dll位数相同，否则会报错dll不是一个可用的Win32应用。</p><p>ForDllCreate.dll与ForDllCreate.64.dll内部包含和前文相同的函数，区别是前者是32位，后者是64位。<br> 在64位REPL上载入32位dll会报错。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ERROR: LoadError: could not load library &quot;e:\\yyb\\HF_first\\ForDllCreat.dll&quot;
%1 is not a valid Win32 application.
Stacktrace:
 [1] top-level scope
   @ e:\\yyb\\HF_first\\test.jl:15
in expression starting at e:\\yyb\\HF_first\\test.jl:15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想在Julia中使用<code>ccall</code>函数来调用DLL中的函数，你可以按照以下步骤进行操作：</p><ol><li><p>假设你有一个名为&quot;example.dll&quot;的DLL文件，其中包含一个名为&quot;add_numbers&quot;的函数，用于将两个整数相加。</p></li><li><p>在Julia中，使用<code>ccall</code>函数来加载和调用DLL中的函数。以下是一个示例：</p></li></ol><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code><span class="token comment"># 调用ccall函数加载DLL文件</span>
<span class="token keyword">const</span> lib <span class="token operator">=</span> <span class="token string">&quot;example.dll&quot;</span>
<span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token keyword">ccall</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">:</span>LoadLibraryA<span class="token punctuation">,</span> lib<span class="token punctuation">)</span><span class="token punctuation">,</span> Ptr<span class="token punctuation">{</span>Cvoid<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Cstring<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lib<span class="token punctuation">)</span>

<span class="token comment"># 定义要调用的函数的签名</span>
<span class="token keyword">const</span> add_numbers <span class="token operator">=</span> <span class="token keyword">ccall</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">:</span>add_numbers<span class="token punctuation">,</span> lib<span class="token punctuation">)</span><span class="token punctuation">,</span> Cint<span class="token punctuation">,</span> <span class="token punctuation">(</span>Cint<span class="token punctuation">,</span> Cint<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 调用函数并获取结果</span>
result <span class="token operator">=</span> add_numbers<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 输出 8</span>

<span class="token comment"># 卸载DLL</span>
<span class="token keyword">ccall</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">:</span>FreeLibrary<span class="token punctuation">,</span> lib<span class="token punctuation">)</span><span class="token punctuation">,</span> Cint<span class="token punctuation">,</span> <span class="token punctuation">(</span>Ptr<span class="token punctuation">{</span>Cvoid<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们首先使用<code>ccall</code>函数加载名为&quot;example.dll&quot;的DLL文件。通过指定函数名称和DLL文件的句柄，我们可以获取要调用的函数的指针。</p><p>然后，我们定义了一个名为<code>add_numbers</code>的Julia函数，并使用<code>ccall</code>函数将其与DLL中的<code>add_numbers</code>函数关联起来。</p><p>最后，我们调用<code>add_numbers</code>函数，并将参数5和3传递给它。返回的结果存储在<code>result</code>变量中，并打印到控制台。</p><p>最后，我们使用<code>ccall</code>函数卸载DLL文件，以释放资源。</p><p>请注意，示例中的函数签名和参数类型可能需要根据DLL中的实际函数进行调整。确保使用正确的参数类型和返回类型。</p><p>使用<code>ccall</code>函数直接调用DLL函数时，需要小心处理内存管理和类型匹配，确保传递正确的参数和返回类型。</p><p>以下是我们针对自己生成的dll的调用的例子：</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code><span class="token comment">#error</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">ccall</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">:</span>OUTPUT<span class="token punctuation">,</span> <span class="token string">&quot;.\\\\ForDllCreat.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Cvoid<span class="token punctuation">,</span> <span class="token punctuation">(</span>Ptr<span class="token punctuation">{</span>Cint<span class="token punctuation">}</span><span class="token punctuation">,</span> Ptr<span class="token punctuation">{</span>Cint<span class="token punctuation">}</span><span class="token punctuation">,</span> Ptr<span class="token punctuation">{</span>Cint<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pointer_<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> pointer<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> pointer<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>

<span class="token comment">#work</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">ccall</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">:</span>OUTPUT<span class="token punctuation">,</span> <span class="token string">&quot;.\\\\ForDllCreat64.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Cvoid<span class="token punctuation">,</span> <span class="token punctuation">(</span>Ptr<span class="token punctuation">{</span>Cint<span class="token punctuation">}</span><span class="token punctuation">,</span> Ptr<span class="token punctuation">{</span>Cint<span class="token punctuation">}</span><span class="token punctuation">,</span> Ptr<span class="token punctuation">{</span>Cint<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pointer_from_objref<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x40</span><span class="token punctuation">,</span> pointer_from_objref<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x40</span><span class="token punctuation">,</span> pointer_from_objref<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x40</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ul><li>在第一段代码中，使用了名为<code>ForDllCreat.dll</code>的 DLL 文件来执行函数调用。函数名称为<code>OUTPUT</code>，该函数接受三个整型指针作为参数，并将结果存储在指针<code>c</code>指向的位置。通过<code>ccall</code>函数来调用 DLL 中的函数，并传递指针参数。最后打印出指针<code>c</code>所指向的值。</li><li>在第二段代码中，使用了名为<code>ForDllCreat64.dll</code>的 DLL 文件来执行函数调用。其他部分与第一段代码类似，但是在传递指针参数时，对每个指针都进行了偏移，即将指针从对象引用中提取后加上<code>0x40</code>的偏移量。最后同样打印出指针<code>c</code>所指向的值。</li></ul><p>请注意，这段代码中的部分函数和对象引用是特定于编程语言的，并且需要正确配置和具备相应的 DLL 文件才能正常运行。</p><p>Julia可用通过ccall函数调用C和Fortran编译的dll文件，输入格式为</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>  ccall((function_name, library), returntype, (argtype1, ...), argvalue1, ...)
  ccall(function_name, returntype, (argtype1, ...), argvalue1, ...)  
  ccall(function_pointer, returntype, (argtype1, ...), argvalue1, ...)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里通过第一种调用方法来调用我们编译的ForDllCreat64.dll，</p><p>function_name是调用的函数名称。引用时即可以用:OUTPUT表示，也可以用&quot;OUTPUT&quot;表示。</p>`,21),C={href:"https://www.bilibili.com/video/BV1dW411G7hL",target:"_blank",rel:"noopener noreferrer"},q=s(`<p>library是被调用dll的路径，用字符串表示。调用C标准库中的函数时，library可以略去。</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code><span class="token comment">#调用C标准库函数，不用写引用</span>
t <span class="token operator">=</span> <span class="token keyword">ccall</span><span class="token punctuation">(</span><span class="token punctuation">:</span>clock<span class="token punctuation">,</span> Int32<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>returntype是被调函数的返回类型。Fortran的subroutine返回类型是空，即void，在Julia中表示为Cvoid。数据类型对应的表格可以参考下文表格，也可以查看官方文档。</p><p>(argtype1, ...)是一个tuple，与被调函数的输入变量类型要一一对应，类似在C++中定义一个与被调函数输入变量类型一一对应的函数原型。</p><p>argvalue1, ... 这部分是输入变量，类型要与(argtype1, ...)一一对应，并与被调函数对应。输入变量不用tuple表示。</p>`,5),x={href:"https://docs.juliacn.com/latest/manual/calling-c-and-fortran-code/",target:"_blank",rel:"noopener noreferrer"},y=n("figure",null,[n("img",{src:b,alt:"图 1",tabindex:"0",loading:"lazy"}),n("figcaption",null,"图 1")],-1),T=n("h3",{id:"更多julia的信息",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#更多julia的信息","aria-hidden":"true"},"#"),a(" 更多julia的信息")],-1),D=n("p",null,[n("strong",null,"Julia中指针的用法"),a(" （以下内容暂时不用那么细，先忽略，需用到时查julia的官方文档。）")],-1),F=n("p",null,"数组类型基本上通过指针传递。",-1),U=n("p",{T:""},"Julia中，指针有两种，Ptr{T}与Ref",-1),P=n("p",null,"Ptr表示的是从变量获得的地址，这类地址是否被销毁不由Julia管理，一般是“危险的”（unsafe)。",-1),j=n("p",null,"Ref是由Julia分配的地址，这类地址的任何更改都由Julia进行，因此是“安全的”。",-1),S=n("p",null,"但是Ref能用的方法似乎不多，目前为止我没学明白这个怎么用。",-1),E=n("br",null,null,-1),O=n("br",null,null,-1),w={href:"https://docs.julialang.org/en/v1/base/c/",target:"_blank",rel:"noopener noreferrer"},I=s(`<div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>a<span class="token operator">=</span><span class="token string">&quot;大家好&quot;</span>
b<span class="token operator">=</span>pointer<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
c<span class="token operator">=</span>pointer_from_objref<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token keyword">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token keyword">println</span><span class="token punctuation">(</span>b<span class="token operator">-</span>c<span class="token punctuation">)</span>

<span class="token keyword">println</span><span class="token punctuation">(</span><span class="token string">&quot;a[1]的字节数是&quot;</span><span class="token punctuation">,</span>sizeof<span class="token punctuation">(</span>typeof<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#UInt8的字节数是1,但是Char类型的字节数是4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由地址获得值的方法是unsafe_pointer_to_objref，这个函数也是官方文档中C接口的函数。</p><p>对一个Ptr指针，用pointer获得的指针要减去一个数据类型的bit数才能获得指针内的值。</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1.23</span><span class="token punctuation">]</span>

b<span class="token operator">=</span>pointer<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
c<span class="token operator">=</span>pointer_from_objref<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

d<span class="token operator">=</span>unsafe_pointer_to_objref<span class="token punctuation">(</span>b<span class="token operator">-</span><span class="token number">0x40</span><span class="token punctuation">)</span>
e<span class="token operator">=</span>unsafe_pointer_to_objref<span class="token punctuation">(</span>c<span class="token punctuation">)</span>

<span class="token keyword">println</span><span class="token punctuation">(</span><span class="token string">&quot;d=&quot;</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span>
<span class="token keyword">println</span><span class="token punctuation">(</span><span class="token string">&quot;e=&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function J(N,R){const e=o("ExternalLinkIcon");return i(),p("div",null,[_,c(` 
1.使用Fortran生成dll

2.使用VS2013开发人员命令提示查看dll位数

3.使用C++调用dll

4.使用Julia调用dll `),h,n("p",null,[a("Julia官方文档地址："),n("a",L,[a("Calling C and Fortran Code"),t(e)])]),f,n("p",null,[a("C语言与Fortran输出dll时函数名不变，C++输出函数有命名粉碎，自制dll尽量采用C输出，一定要确定被调用函数的名字才能成功引用。"),n("a",C,[a("可看此视频"),t(e)])]),q,n("p",null,[a("不同语言间调用dll，最重要的就是数据类型的匹配。下表是"),n("a",x,[a("从Julia官方文档中复制的数据类型对应表"),t(e)]),a("。更多细节请查看官方文档。")]),y,T,D,F,U,P,j,S,n("p",null,[a("Julia中获得变量地址的函数有pointer和pointer_form_objref，他们获得的指针都是Ptr型的"),E,a(" pointer获得的地址被标明了数据类型，并且总比pointer_form_objref的返回值多出一个数据类型的bit数；pointer_form_objref获得的地址是无数据类型的。"),O,a(" 在官方文档中，pointer_from_objref是对C提供接口的方法("),n("a",w,[a("C_Interface"),t(e)]),a(")")]),I])}const M=l(g,[["render",J],["__file","9-dll生成与调用实操.html.vue"]]);export{M as default};
