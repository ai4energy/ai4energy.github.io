import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,a as n,b as s,d as p,w as e,f as a}from"./app-6b49bbd8.js";const u="/assets/image/05Simulation/componementModel-10_33_41.png",r="/assets/image/05Simulation/componementModel-10_03_06.png",k={},d=a(`<h1 id="组件化建模实例" tabindex="-1"><a class="header-anchor" href="#组件化建模实例" aria-hidden="true">#</a> 组件化建模实例</h1><p>!!! tip<br> Contents：MTK、组件化建模</p><pre><code>Contributor: YJY

Email:522432938@qq.com

如有错误，请批评指正。
</code></pre><p>!!! note</p><pre><code>MTK = ModelingToolkit.jl

[ModelingToolkit.jl Acausal Component-Based Modeling the RC Circuit](https://mtk.sciml.ai/stable/tutorials/acausal_components/)介绍了组件化建模的例子
</code></pre><h2 id="mtk符号建模" tabindex="-1"><a class="header-anchor" href="#mtk符号建模" aria-hidden="true">#</a> MTK符号建模</h2>`,6),m=a('<p>这一篇中主要介绍符号建模的另一个强大功能——组件化建模。</p><h2 id="rc电路建模实例" tabindex="-1"><a class="header-anchor" href="#rc电路建模实例" aria-hidden="true">#</a> RC电路建模实例</h2><p>仿真如下图的电路系统：</p><figure><img src="'+u+`" alt="图 2" tabindex="0" loading="lazy"><figcaption>图 2</figcaption></figure><p><strong>@MTK版本：8.5.5</strong></p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code><span class="token keyword">using</span> ModelingToolkit<span class="token punctuation">,</span> Plots<span class="token punctuation">,</span> DifferentialEquations

@variables t
@connector <span class="token keyword">function</span> Pin<span class="token punctuation">(</span><span class="token punctuation">;</span> name<span class="token punctuation">)</span>
    sts <span class="token operator">=</span> @variables v<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.0</span> i<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token punctuation">[</span>connect <span class="token operator">=</span> Flow<span class="token punctuation">]</span>
    ODESystem<span class="token punctuation">(</span>Equation<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> sts<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> name<span class="token operator">=</span>name<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> Ground<span class="token punctuation">(</span><span class="token punctuation">;</span> name<span class="token punctuation">)</span>
    @named g <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token punctuation">)</span>
    eqs <span class="token operator">=</span> <span class="token punctuation">[</span>g<span class="token punctuation">.</span>v <span class="token operator">~</span> <span class="token number">0</span><span class="token punctuation">]</span>
    compose<span class="token punctuation">(</span>ODESystem<span class="token punctuation">(</span>eqs<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> OnePort<span class="token punctuation">(</span><span class="token punctuation">;</span> name<span class="token punctuation">)</span>
    @named p <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token punctuation">)</span>
    @named n <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sts <span class="token operator">=</span> @variables v<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.0</span> i<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.0</span>
    eqs <span class="token operator">=</span> <span class="token punctuation">[</span>
        v <span class="token operator">~</span> p<span class="token punctuation">.</span>v <span class="token operator">-</span> n<span class="token punctuation">.</span>v
        <span class="token number">0</span> <span class="token operator">~</span> p<span class="token punctuation">.</span>i <span class="token operator">+</span> n<span class="token punctuation">.</span>i
        i <span class="token operator">~</span> p<span class="token punctuation">.</span>i
    <span class="token punctuation">]</span>
    compose<span class="token punctuation">(</span>ODESystem<span class="token punctuation">(</span>eqs<span class="token punctuation">,</span> t<span class="token punctuation">,</span> sts<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> Resistor<span class="token punctuation">(</span><span class="token punctuation">;</span> name<span class="token punctuation">,</span> R<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>
    @named oneport <span class="token operator">=</span> OnePort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    @unpack v<span class="token punctuation">,</span> i <span class="token operator">=</span> oneport
    ps <span class="token operator">=</span> @parameters R <span class="token operator">=</span> R
    eqs <span class="token operator">=</span> <span class="token punctuation">[</span>
        v <span class="token operator">~</span> i <span class="token operator">*</span> R
    <span class="token punctuation">]</span>
    extend<span class="token punctuation">(</span>ODESystem<span class="token punctuation">(</span>eqs<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ps<span class="token punctuation">;</span> name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> oneport<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> Capacitor<span class="token punctuation">(</span><span class="token punctuation">;</span> name<span class="token punctuation">,</span> C<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>
    @named oneport <span class="token operator">=</span> OnePort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    @unpack v<span class="token punctuation">,</span> i <span class="token operator">=</span> oneport
    ps <span class="token operator">=</span> @parameters C <span class="token operator">=</span> C
    D <span class="token operator">=</span> Differential<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    eqs <span class="token operator">=</span> <span class="token punctuation">[</span>
        D<span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">~</span> i <span class="token operator">/</span> C
    <span class="token punctuation">]</span>
    extend<span class="token punctuation">(</span>ODESystem<span class="token punctuation">(</span>eqs<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ps<span class="token punctuation">;</span> name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> oneport<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> ConstantVoltage<span class="token punctuation">(</span><span class="token punctuation">;</span> name<span class="token punctuation">,</span> V<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>
    @named oneport <span class="token operator">=</span> OnePort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    @unpack v <span class="token operator">=</span> oneport
    ps <span class="token operator">=</span> @parameters V <span class="token operator">=</span> V
    eqs <span class="token operator">=</span> <span class="token punctuation">[</span>
        V <span class="token operator">~</span> v
    <span class="token punctuation">]</span>
    extend<span class="token punctuation">(</span>ODESystem<span class="token punctuation">(</span>eqs<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ps<span class="token punctuation">;</span> name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> oneport<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> Inductor<span class="token punctuation">(</span><span class="token punctuation">;</span> name<span class="token punctuation">,</span> L<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>
    @named oneport <span class="token operator">=</span> OnePort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    @unpack v<span class="token punctuation">,</span> i <span class="token operator">=</span> oneport
    ps <span class="token operator">=</span> @parameters L <span class="token operator">=</span> L
    D <span class="token operator">=</span> Differential<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    eqs <span class="token operator">=</span> <span class="token punctuation">[</span>
        D<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">~</span> v <span class="token operator">/</span> L
    <span class="token punctuation">]</span>
    extend<span class="token punctuation">(</span>ODESystem<span class="token punctuation">(</span>eqs<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ps<span class="token punctuation">;</span> name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> oneport<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> ChangeableVoltage<span class="token punctuation">(</span><span class="token punctuation">;</span> name<span class="token punctuation">)</span>
    @named oneport <span class="token operator">=</span> OnePort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    @unpack v<span class="token punctuation">,</span> i <span class="token operator">=</span> oneport
    eqs <span class="token operator">=</span> <span class="token punctuation">[</span>
        v <span class="token operator">~</span> <span class="token number">16</span> <span class="token operator">*</span> sin<span class="token punctuation">(</span><span class="token number">2</span><span class="token constant">π</span> <span class="token operator">*</span> t<span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
    extend<span class="token punctuation">(</span>ODESystem<span class="token punctuation">(</span>eqs<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> oneport<span class="token punctuation">)</span>
<span class="token keyword">end</span>



@named resistor <span class="token operator">=</span> Resistor<span class="token punctuation">(</span>R<span class="token operator">=</span><span class="token number">3.0</span><span class="token punctuation">)</span>
@named capacitor <span class="token operator">=</span> Capacitor<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span>
@named source <span class="token operator">=</span> ChangeableVoltage<span class="token punctuation">(</span><span class="token punctuation">)</span>
@named inductor <span class="token operator">=</span> Inductor<span class="token punctuation">(</span>L<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>
@named ground <span class="token operator">=</span> Ground<span class="token punctuation">(</span><span class="token punctuation">)</span>


rc_eqs <span class="token operator">=</span> <span class="token punctuation">[</span>
    connect<span class="token punctuation">(</span>source<span class="token punctuation">.</span>p<span class="token punctuation">,</span> capacitor<span class="token punctuation">.</span>p<span class="token punctuation">)</span>
    connect<span class="token punctuation">(</span>capacitor<span class="token punctuation">.</span>n<span class="token punctuation">,</span> inductor<span class="token punctuation">.</span>p<span class="token punctuation">)</span>
    connect<span class="token punctuation">(</span>inductor<span class="token punctuation">.</span>n<span class="token punctuation">,</span> resistor<span class="token punctuation">.</span>p<span class="token punctuation">)</span>
    connect<span class="token punctuation">(</span>source<span class="token punctuation">.</span>n<span class="token punctuation">,</span> resistor<span class="token punctuation">.</span>n<span class="token punctuation">,</span> ground<span class="token punctuation">.</span>g<span class="token punctuation">)</span>
<span class="token punctuation">]</span>


@named _rc_model <span class="token operator">=</span> ODESystem<span class="token punctuation">(</span>rc_eqs<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
@named rc_model <span class="token operator">=</span> compose<span class="token punctuation">(</span>_rc_model<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>resistor<span class="token punctuation">,</span> inductor<span class="token punctuation">,</span> capacitor<span class="token punctuation">,</span> source<span class="token punctuation">,</span> ground<span class="token punctuation">]</span><span class="token punctuation">)</span>

sys <span class="token operator">=</span> structural_simplify<span class="token punctuation">(</span>rc_model<span class="token punctuation">)</span>

<span class="token keyword">using</span> Plots
u0 <span class="token operator">=</span> <span class="token punctuation">[</span>
    capacitor<span class="token punctuation">.</span>v <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0.0</span>
    capacitor<span class="token punctuation">.</span>p<span class="token punctuation">.</span>i <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0.0</span>
    inductor<span class="token punctuation">.</span>i <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0</span>
    inductor<span class="token punctuation">.</span>v <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token punctuation">]</span>
prob <span class="token operator">=</span> ODAEProblem<span class="token punctuation">(</span>sys<span class="token punctuation">,</span> u0<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sol <span class="token operator">=</span> solve<span class="token punctuation">(</span>prob<span class="token punctuation">,</span> Tsit5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sol<span class="token punctuation">[</span>resistor<span class="token punctuation">.</span>p<span class="token punctuation">.</span>i<span class="token punctuation">]</span>
p1 <span class="token operator">=</span> plot<span class="token punctuation">(</span>sol<span class="token punctuation">,</span> vars<span class="token operator">=</span><span class="token punctuation">[</span>capacitor<span class="token punctuation">.</span>v capacitor<span class="token punctuation">.</span>p<span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> xlims<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ylim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p2 <span class="token operator">=</span> plot<span class="token punctuation">(</span>sol<span class="token punctuation">,</span> vars<span class="token operator">=</span><span class="token punctuation">[</span>inductor<span class="token punctuation">.</span>v inductor<span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> xlims<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ylim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plot<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如图所示：</p><figure><img src="`+r+'" alt="图 1" tabindex="0" loading="lazy"><figcaption>图 1</figcaption></figure><hr><p>主要的过程有以下几步：</p><ol><li>构建组件</li><li>定义组件实例</li><li>连接系统</li><li>化简</li><li>设置初值</li><li>构建问题并求解</li><li>结果处理</li></ol><hr><p>构建组件过程中主要有两方面考虑，系统内部结构与系统对外接口。</p><p><strong>内部结构</strong>则是各个组件内部的数学特性。对于电阻有：</p>',14),v=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"V"),n("mo",null,"="),n("mi",null,"R"),n("mo",null,"∗"),n("mi",null,"I")]),n("annotation",{encoding:"application/x-tex"}," V=R*I ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I")])])])])],-1),b=n("p",null,"对于电容有：",-1),h=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mfrac",null,[n("mrow",null,[n("mi",null,"d"),n("mi",null,"V")]),n("mrow",null,[n("mi",null,"d"),n("mi",null,"t")])]),n("mo",null,"="),n("mfrac",null,[n("mi",null,"I"),n("mi",null,"C")])]),n("annotation",{encoding:"application/x-tex"}," \\frac{dV}{dt}=\\frac{I}{C} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3714em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"t")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.0463em","vertical-align":"-0.686em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3603em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])])])],-1),g=n("p",null,"对于电感有：",-1),y=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mfrac",null,[n("mrow",null,[n("mi",null,"d"),n("mi",null,"I")]),n("mrow",null,[n("mi",null,"d"),n("mi",null,"t")])]),n("mo",null,"="),n("mfrac",null,[n("mi",null,"V"),n("mi",null,"L")])]),n("annotation",{encoding:"application/x-tex"}," \\frac{dI}{dt}=\\frac{V}{L} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3714em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"t")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.0463em","vertical-align":"-0.686em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3603em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"L")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])])])],-1),f=a(`<p>这些关系可以在模型构建时体现。这是系统的内部变量之间的决定关系。</p><p><strong>外部结构</strong>是模块化的另一个关键部分。</p><p>RC的接口体现在函数Pin()上，每一个组件都由两个Pin——输入引脚与输出引脚。这完全是抽象出来的，引脚存在的意义就是为了连接。每个引脚有自己的电压值（更准确的说是电势大小）以及电流。这些变量的引入只是为了跟好地模块化。例如，器件A的出口引脚与器件B的进口引脚相连，它们在电路模型中完全可以视为一个等价的点。为了使模块变得更加完整，分化出来各自的引脚。事实上，这些引脚变量在最后计算时，被化简消除了。</p><p>所以，在模块化的过程中为了使个组件变得完整，会派生出很多变量，这些变量都是“锦上添花”的存在，不具备决定性意义。但它们又是使各模块间能够衔接的必要存在。</p><hr><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>
@named resistor <span class="token operator">=</span> Resistor<span class="token punctuation">(</span>R<span class="token operator">=</span><span class="token number">3.0</span><span class="token punctuation">)</span>
@named capacitor <span class="token operator">=</span> Capacitor<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span>
@named source <span class="token operator">=</span> ChangeableVoltage<span class="token punctuation">(</span><span class="token punctuation">)</span>
@named inductor <span class="token operator">=</span> Inductor<span class="token punctuation">(</span>L<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>
@named ground <span class="token operator">=</span> Ground<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组件实例化中的<code>@named</code>的作用是给相应组件命名，每个组件的本质都是一个ODESystem，不同的组件不过是ODESystem中存储的方程不同。ODESystem中有一个成员为name，<code>@named</code>把实例的名称赋值给这个成员变量。</p><p>例如,下面两种定义方式是等价的。</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>
@named resistor <span class="token operator">=</span> Resistor<span class="token punctuation">(</span>R<span class="token operator">=</span><span class="token number">3.0</span><span class="token punctuation">)</span>

resistor <span class="token operator">=</span> Resistor<span class="token punctuation">(</span>R<span class="token operator">=</span><span class="token number">3.0</span><span class="token punctuation">;</span>name <span class="token operator">=</span><span class="token punctuation">:</span>resistor<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>rc_eqs <span class="token operator">=</span> <span class="token punctuation">[</span>
    connect<span class="token punctuation">(</span>source<span class="token punctuation">.</span>p<span class="token punctuation">,</span> capacitor<span class="token punctuation">.</span>p<span class="token punctuation">)</span>
    connect<span class="token punctuation">(</span>capacitor<span class="token punctuation">.</span>n<span class="token punctuation">,</span> inductor<span class="token punctuation">.</span>p<span class="token punctuation">)</span>
    connect<span class="token punctuation">(</span>inductor<span class="token punctuation">.</span>n<span class="token punctuation">,</span> resistor<span class="token punctuation">.</span>p<span class="token punctuation">)</span>
    connect<span class="token punctuation">(</span>source<span class="token punctuation">.</span>n<span class="token punctuation">,</span> resistor<span class="token punctuation">.</span>n<span class="token punctuation">,</span> ground<span class="token punctuation">.</span>g<span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依据系统的拓扑结构进行连接。connect函数可以接受任意参数个（并联中多点连接的问题就解决了）。连接的本质是建立模块间的联系，连接模块内部的机理，一旦连接绑定，这些变量的使命就完成了。</p><hr><p>化简的过程中，会把多余的中间变量都消去。</p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>sys <span class="token operator">=</span> structural_simplify<span class="token punctuation">(</span>rc_model<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p><strong>查看各组件各变量的求解结果：</strong></p><div class="language-julia line-numbers-mode" data-ext="julia"><pre class="language-julia"><code>sol<span class="token punctuation">[</span>resistor<span class="token punctuation">.</span>p<span class="token punctuation">.</span>i<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>值得一提的是，在求解的过程中会化简，但是依旧可以查看这些变量的求解结果。方法如示例所示。</p><hr>`,20);function _(x,w){const t=c("RouterLink");return l(),i("div",null,[d,n("p",null,[s("在"),p(t,{to:"/docs/Modeling/DE_intro.html"},{default:e(()=>[s("DifferentialEquations建模方法")]),_:1}),s("与"),p(t,{to:"/docs/Modeling/MTK_intro.html"},{default:e(()=>[s("ModelingToolkit建模方法")]),_:1}),s("中介绍DE与MTK的两种建模方式。分析了使用它们建模的具体步骤与实现方法，并介绍了相应的内涵。")]),m,v,b,h,g,y,f])}const D=o(k,[["render",_],["__file","componementModel.html.vue"]]);export{D as default};
